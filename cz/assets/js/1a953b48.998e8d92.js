"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[720],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return k}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),k=o,m=d["".concat(l,".").concat(k)]||d[k]||p[k]||a;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function k(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},113:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={sidebar_position:3},l="Spr\xe1va soubor\u016f",u={unversionedId:"tutorials/simple-viewer/nodejs/data",id:"tutorials/simple-viewer/nodejs/data",isDocsHomePage:!1,title:"Spr\xe1va soubor\u016f",description:"V dal\u0161\xedm kroku roz\u0161\xed\u0159\xedme n\xe1\u0161 server, abychom s jeho pomoc\xed mohli z\xedsk\xe1vat seznam model\u016f",source:"@site/i18n/cz/docusaurus-plugin-content-docs/current/tutorials/simple-viewer/nodejs/data.md",sourceDirName:"tutorials/simple-viewer/nodejs",slug:"/tutorials/simple-viewer/nodejs/data",permalink:"/forge-samples-docs/cz/docs/tutorials/simple-viewer/nodejs/data",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/main/website/docs/tutorials/simple-viewer/nodejs/data.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Autentikace",permalink:"/forge-samples-docs/cz/docs/tutorials/simple-viewer/nodejs/auth"},next:{title:"Prohl\xed\u017ee\u010d & u\u017eivatelsk\xe9 rozhran\xed",permalink:"/forge-samples-docs/cz/docs/tutorials/simple-viewer/nodejs/viewer"}},c=[{value:"P\u0159\xedprava adres\xe1\u0159e",id:"p\u0159\xedprava-adres\xe1\u0159e",children:[]},{value:"V\xfd\u010det model\u016f",id:"v\xfd\u010det-model\u016f",children:[]},{value:"Nahr\xe1v\xe1n\xed a konverze model\u016f",id:"nahr\xe1v\xe1n\xed-a-konverze-model\u016f",children:[]},{value:"Serverov\xe9 adresy",id:"serverov\xe9-adresy",children:[]},{value:"Zkou\u0161ka",id:"zkou\u0161ka",children:[]}],p={toc:c};function d(e){var n=e.components,s=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"spr\xe1va-soubor\u016f"},"Spr\xe1va soubor\u016f"),(0,a.kt)("p",null,"V dal\u0161\xedm kroku roz\u0161\xed\u0159\xedme n\xe1\u0161 server, abychom s jeho pomoc\xed mohli z\xedsk\xe1vat seznam model\u016f\np\u0159ipraven\xfdch k prohl\xed\u017een\xed, nahr\xe1vat nov\xe9 modely a tak\xe9 spou\u0161t\u011bt jejich p\u0159eklad do form\xe1tu\npot\u0159ebn\xe9ho pro prohl\xed\u017een\xed v komponent\u011b Forge Viewer."),(0,a.kt)("h2",{id:"p\u0159\xedprava-adres\xe1\u0159e"},"P\u0159\xedprava adres\xe1\u0159e"),(0,a.kt)("p",null,'Nejprve mus\xedme zajistit, aby na\u0161e aplikace m\u011bla "adres\xe1\u0159" ve slu\u017eb\u011b Data Management, kde by\nmohla ukl\xe1dat sv\xe1 data. Tento adres\xe1\u0159 by obvykle byl vytvo\u0159en pouze jednou b\u011bhem zakl\xe1d\xe1n\xed\nnov\xe9ho projektu, ale v t\xe9to uk\xe1zkov\xe9 aplikaci vytvo\u0159\xedme pomocnou funkci, kter\xe1 zajist\xed, \u017ee\nje konkr\xe9tn\xed adres\xe1\u0159 v\u017edy k dispozici. Upravte vyzna\u010den\xe9 \u010d\xe1sti k\xf3du v souboru ',(0,a.kt)("inlineCode",{parentName:"p"},"services/forge.js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'{1,8,29-40} title="services/forge.js"',"{1,8,29-40}":!0,title:'"services/forge.js"'},"const { AuthClientTwoLegged, BucketsApi } = require('forge-apis');\n\nconst { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, FORGE_BUCKET } = process.env;\nif (!FORGE_CLIENT_ID || !FORGE_CLIENT_SECRET) {\n    console.warn('Missing some of the environment variables.');\n    process.exit(1);\n}\nconst BUCKET = FORGE_BUCKET || `${FORGE_CLIENT_ID.toLowerCase()}-basic-app`;\nconst INTERNAL_TOKEN_SCOPES = ['bucket:read', 'bucket:create', 'data:read', 'data:write', 'data:create'];\nconst PUBLIC_TOKEN_SCOPES = ['viewables:read'];\n\nlet internalAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, INTERNAL_TOKEN_SCOPES, true);\nlet publicAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, PUBLIC_TOKEN_SCOPES, true);\n\nasync function getInternalToken() {\n    if (!internalAuthClient.isAuthorized()) {\n        await internalAuthClient.authenticate();\n    }\n    return internalAuthClient.getCredentials();\n}\n\nasync function getPublicToken() {\n    if (!publicAuthClient.isAuthorized()) {\n        await publicAuthClient.authenticate();\n    }\n    return publicAuthClient.getCredentials();\n}\n\nasync function ensureBucketExists() {\n    const token = await getInternalToken();\n    try {\n        await new BucketsApi().getBucketDetails(BUCKET, null, token);\n    } catch (err) {\n        if (err.statusCode === 404) {\n            await new BucketsApi().createBucket({ bucketKey: BUCKET, policyKey: 'temporary' }, {}, null, token);\n        } else {\n            throw err;\n        }\n    }\n}\n\nmodule.exports = {\n    getPublicToken\n};\n")),(0,a.kt)("p",null,"Funkce ",(0,a.kt)("inlineCode",{parentName:"p"},"ensureBucketExists")," se jednodu\u0161e pokus\xed zjistit dal\u0161\xed informace o konkr\xe9tn\xedm adres\xe1\u0159i\na pokud bude odpov\u011bd\xed z platformy Forge ",(0,a.kt)("inlineCode",{parentName:"p"},"404 Not Found"),", pokus\xed se tento adres\xe1\u0159 vytvo\u0159it."),(0,a.kt)("h2",{id:"v\xfd\u010det-model\u016f"},"V\xfd\u010det model\u016f"),(0,a.kt)("p",null,"Nyn\xed m\u016f\u017eeme do souboru ",(0,a.kt)("inlineCode",{parentName:"p"},"services/forge.js")," vlo\u017eit dal\u0161\xed pomocnou funkci, kter\xe1 poskytne v\xfd\u010det\nv\u0161ech model\u016f, kter\xe9 jsou k dispozici v na\u0161em p\u0159ednastaven\xe9m adres\xe1\u0159i:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'{1,15,44-58,62} title="services/forge.js"',"{1,15,44-58,62}":!0,title:'"services/forge.js"'},"const { AuthClientTwoLegged, BucketsApi, ObjectsApi } = require('forge-apis');\n\nconst { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, FORGE_BUCKET } = process.env;\nconst { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET } = process.env;\nif (!FORGE_CLIENT_ID || !FORGE_CLIENT_SECRET) {\n    console.warn('Missing some of the environment variables.');\n    process.exit(1);\n}\nconst INTERNAL_TOKEN_SCOPES = ['bucket:read', 'bucket:create', 'data:read', 'data:write', 'data:create'];\nconst PUBLIC_TOKEN_SCOPES = ['viewables:read'];\n\nlet internalAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, INTERNAL_TOKEN_SCOPES, true);\nlet publicAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, PUBLIC_TOKEN_SCOPES, true);\n\nconst urnify = (id) => Buffer.from(id).toString('base64').replace(/=/g, '');\n\nasync function getInternalToken() {\n    if (!internalAuthClient.isAuthorized()) {\n        await internalAuthClient.authenticate();\n    }\n    return internalAuthClient.getCredentials();\n}\n\nasync function getPublicToken() {\n    if (!publicAuthClient.isAuthorized()) {\n        await publicAuthClient.authenticate();\n    }\n    return publicAuthClient.getCredentials();\n}\n\nasync function ensureBucketExists() {\n    const token = await getInternalToken();\n    try {\n        await new BucketsApi().getBucketDetails(BUCKET, null, token);\n    } catch (err) {\n        if (err.statusCode === 404) {\n            await new BucketsApi().createBucket({ bucketKey: BUCKET, policyKey: 'temporary' }, {}, null, token);\n        } else {\n            throw err;\n        }\n    }\n}\n\nasync function listModels() {\n    await ensureBucketExists(); // Remove this if we can assume the bucket to exist\n    const token = await getInternalToken();\n    let response = await new ObjectsApi().getObjects(BUCKET, { limit: 64 }, null, token);\n    let objects = response.body.items;\n    while (response.body.next) {\n        const startAt = new URL(response.body.next).searchParams.get('startAt');\n        response = await new ObjectsApi().getObjects(BUCKET, { limit: 64, startAt }, null, token);\n        objects = objects.concat(response.body.items);\n    }\n    return objects.map(obj => ({\n        name: obj.objectKey,\n        urn: urnify(obj.objectId)\n    }));\n}\n\nmodule.exports = {\n    getPublicToken,\n    listModels\n};\n")),(0,a.kt)("p",null,"Funkce ",(0,a.kt)("inlineCode",{parentName:"p"},"listModels")," postupn\u011b projde ve\u0161ker\xe9 soubory a vr\xe1ti jejich n\xe1zvy a URN\n(base64-enk\xf3dovan\xe9 ID, kter\xe9 bude pozd\u011bji pou\u017eito p\u0159i komunikaci se slu\u017ebou Model Derivative)."),(0,a.kt)("h2",{id:"nahr\xe1v\xe1n\xed-a-konverze-model\u016f"},"Nahr\xe1v\xe1n\xed a konverze model\u016f"),(0,a.kt)("p",null,"Posledn\xed pomocn\xe1 funkce, kterou p\u0159id\xe1me do souboru ",(0,a.kt)("inlineCode",{parentName:"p"},"services/forge.js"),", bude zaji\u0161\u0165ovat nahr\xe1v\xe1n\xed\nnov\xfdch model\u016f do slu\u017eby Data Management a jejich konverzi do form\xe1tu, kter\xfd m\u016f\u017eeme pozd\u011bji na\u010d\xedst\ndo Forge Vieweru:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'{1,2,61-79,84} title="services/forge.js"',"{1,2,61-79,84}":!0,title:'"services/forge.js"'},"const fs = require('fs');\nconst { AuthClientTwoLegged, BucketsApi, ObjectsApi, DerivativesApi } = require('forge-apis');\n\nconst { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, FORGE_BUCKET } = process.env;\nif (!FORGE_CLIENT_ID || !FORGE_CLIENT_SECRET) {\n    console.warn('Missing some of the environment variables.');\n    process.exit(1);\n}\nconst BUCKET = FORGE_BUCKET || `${FORGE_CLIENT_ID.toLowerCase()}-basic-app`;\nconst INTERNAL_TOKEN_SCOPES = ['bucket:read', 'bucket:create', 'data:read', 'data:write', 'data:create'];\nconst PUBLIC_TOKEN_SCOPES = ['viewables:read'];\n\nlet internalAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, INTERNAL_TOKEN_SCOPES, true);\nlet publicAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, PUBLIC_TOKEN_SCOPES, true);\n\nconst urnify = (id) => Buffer.from(id).toString('base64').replace(/=/g, '');\n\nasync function getInternalToken() {\n    if (!internalAuthClient.isAuthorized()) {\n        await internalAuthClient.authenticate();\n    }\n    return internalAuthClient.getCredentials();\n}\n\nasync function getPublicToken() {\n    if (!publicAuthClient.isAuthorized()) {\n        await publicAuthClient.authenticate();\n    }\n    return publicAuthClient.getCredentials();\n}\n\nasync function ensureBucketExists() {\n    const token = await getInternalToken();\n    try {\n        await new BucketsApi().getBucketDetails(BUCKET, null, token);\n    } catch (err) {\n        if (err.statusCode === 404) {\n            await new BucketsApi().createBucket({ bucketKey: BUCKET, policyKey: 'temporary' }, {}, null, token);\n        } else {\n            throw err;\n        }\n    }\n}\n\nasync function listModels() {\n    await ensureBucketExists(); // Remove this if we can assume the bucket to exist\n    const token = await getInternalToken();\n    let response = await new ObjectsApi().getObjects(BUCKET, { limit: 64 }, null, token);\n    let objects = response.body.items;\n    while (response.body.next) {\n        const startAt = new URL(response.body.next).searchParams.get('startAt');\n        response = await new ObjectsApi().getObjects(BUCKET, { limit: 64, startAt }, null, token);\n        objects = objects.concat(response.body.items);\n    }\n    return objects.map(obj => ({\n        name: obj.objectKey,\n        urn: urnify(obj.objectId)\n    }));\n}\n\nasync function uploadModel(objectName, filePath, rootFilename) {\n    await ensureBucketExists(); // Remove this if we can assume the bucket to exist\n    const token = await getInternalToken();\n    const buffer = fs.readFileSync(filePath);\n    const response = await new ObjectsApi().uploadObject(BUCKET, objectName, buffer.byteLength, buffer, {}, null, token);\n    const job = {\n        input: {\n            urn: urnify(response.body.objectId)\n        },\n        output: {\n            formats: [{ type: 'svf', views: ['2d', '3d'] }]\n        }\n    };\n    if (rootFilename) {\n        job.input.compressedUrn = true;\n        job.input.rootFilename = rootFilename;\n    }\n    await new DerivativesApi().translate(job, {}, null, token);\n}\n\nmodule.exports = {\n    getPublicToken,\n    listModels,\n    uploadModel\n};\n")),(0,a.kt)("h2",{id:"serverov\xe9-adresy"},"Serverov\xe9 adresy"),(0,a.kt)("p",null,"Nakonec je\u0161t\u011b mus\xedme ve\u0161kerou novou funkcionalitu zp\u0159\xedstupnit na\u0161\xed budouc\xed webov\xe9 aplikaci\nskrze dal\u0161\xed Express.js router. Vytvo\u0159te soubor ",(0,a.kt)("inlineCode",{parentName:"p"},"models.js")," v adres\xe1\u0159i ",(0,a.kt)("inlineCode",{parentName:"p"},"routes")," a vlo\u017ete\ndo n\u011bj n\xe1sleduj\xedc\xed k\xf3d:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="routes/models.js"',title:'"routes/models.js"'},"const express = require('express');\nconst formidable = require('express-formidable');\nconst { listModels, uploadModel } = require('../services/forge.js');\n\nlet router = express.Router();\n\nrouter.get('/', async function (req, res, next) {\n    try {\n        res.json(await listModels());\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.post('/', formidable(), async function (req, res, next) {\n    const file = req.files['model-file'];\n    if (!file) {\n        res.status(400).send('The required field (\"model-file\") is missing.');\n        return;\n    }\n    try {\n        await uploadModel(file.name, file.path, req.fields['model-zip-entrypoint']);\n        res.status(200).end();\n    } catch (err) {\n        next(err);\n    }\n});\n\nmodule.exports = router;\n")),(0,a.kt)("p",null,"Tento router bude zaji\u0161\u0165ovat dva druhy po\u017eadavk\u016f - ",(0,a.kt)("inlineCode",{parentName:"p"},"GET")," po\u017eadavek v p\u0159\xedpadech, kdy klient bude\ncht\xedt z\xedskat v\xfd\u010det v\u0161ech model\u016f p\u0159ipraven\xfdch k prohl\xed\u017een\xed, a ",(0,a.kt)("inlineCode",{parentName:"p"},"POST")," po\u017eadavek v p\u0159\xedpadech,\nkdy klient bude cht\xedt nahr\xe1t a zkonvertovat nov\xe9 modely. Funkce ",(0,a.kt)("inlineCode",{parentName:"p"},"formidable()")," pou\u017eit\xe1\npro ",(0,a.kt)("inlineCode",{parentName:"p"},"POST")," po\u017eadavky zajist\xed, \u017ee ve\u0161ker\xe9 po\u017eadavky s obsahem ve form\xe1tu ",(0,a.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),"\nbudou spr\xe1vn\u011b p\u0159e\u010dteny, a \u017ee v nich ulo\u017een\xe9 informace budou k dispozici v objektech ",(0,a.kt)("inlineCode",{parentName:"p"},"req.files"),"\na ",(0,a.kt)("inlineCode",{parentName:"p"},"req.fields"),"."),(0,a.kt)("p",null,"Nezapome\u0148me op\u011bt p\u0159ipojit nov\xfd router k na\u0161\xed serverov\xe9 aplikaci pomoc\xed n\xe1sleduj\xedc\xed \xfapravy\nk\xf3du v souboru ",(0,a.kt)("inlineCode",{parentName:"p"},"server.js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'{7} title="server.js"',"{7}":!0,title:'"server.js"'},"const express = require('express');\nconst PORT = process.env.PORT || 3000;\n\nlet app = express();\napp.use(express.static('public'));\napp.use('/api/auth', require('./routes/auth.js'));\napp.use('/api/models', require('./routes/models.js'));\napp.use(function (err, req, res, next) {\n    console.error(err);\n    res.status(500).send(err.message);\n});\napp.listen(PORT, function () { console.log(`Server listening on port ${PORT}...`); });\n")),(0,a.kt)("p",null,"Jak m\u016f\u017eete vid\u011bt, nov\xfd router bude obstar\xe1vat ",(0,a.kt)("inlineCode",{parentName:"p"},"GET")," a ",(0,a.kt)("inlineCode",{parentName:"p"},"POST")," po\u017eadavky p\u0159ich\xe1zej\xedc\xed na adresu\n",(0,a.kt)("inlineCode",{parentName:"p"},"/api/models"),"."),(0,a.kt)("h2",{id:"zkou\u0161ka"},"Zkou\u0161ka"),(0,a.kt)("p",null,"\u010cas vyzkou\u0161et na\u0161\xed vylep\u0161enou serverovou aplikaci. Tentokr\xe1t m\u016f\u017eete krom\u011b nastaven\xed Forge autentika\u010dn\xedch\n\xfadaj\u016f definovat tak\xe9 konkr\xe9tn\xed adres\xe1\u0159e v prom\u011bnn\xe9 prost\u0159ed\xed ",(0,a.kt)("inlineCode",{parentName:"p"},"FORGE_BUCKET"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export FORGE_CLIENT_ID=your-own-forge-client-id\nexport FORGE_CLIENT_SECRET=your-own-forge-client-secret\nexport FORGE_BUCKET=your-custom-bucket-name\nnpm start\n")),(0,a.kt)("p",null,"Pokud nen\xed jm\xe9no adres\xe1\u0159e definov\xe1no, n\xe1\u0161 k\xf3d v souburu ",(0,a.kt)("inlineCode",{parentName:"p"},"services/forge.js")," vygeneruje sv\xe9 vlastn\xed\np\u0159ipojen\xedm ",(0,a.kt)("inlineCode",{parentName:"p"},"-basic-app")," za Va\u0161e Forge client ID."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Slu\u017eba Data Management vy\u017eaduje, aby n\xe1zvy adres\xe1\u0159\u016f byly ",(0,a.kt)("strong",{parentName:"p"},"glob\xe1ln\u011b unik\xe1tn\xed"),",\na pokusy o vytvo\u0159n\xed adres\xe1\u0159e, jeho\u017e jm\xe9no ji\u017e pou\u017e\xedv\xe1 jin\xfd v\xfdvoj\xe1\u0159, skon\u010d\xed s chybou ",(0,a.kt)("inlineCode",{parentName:"p"},"409 Conflict"),".\nV\xedce informac\xed najdete v ofici\xe1ln\xed ",(0,a.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/data/v2/reference/http/buckets-POST"},"dokumentaci"),".")),(0,a.kt)("p",null,"Pokud nyn\xed otev\u0159ete adresu http://localhost:3000/api/models v prohl\xed\u017ee\u010di, server by m\u011bl odpov\u011bd\u011bt\ns v\xfd\u010dtem v\u0161ech objekt\u016f ve Va\u0161em adres\xe1\u0159i ve form\xe1tu JSON."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Server Response",src:t(3182).Z})))}d.isMDXComponent=!0},3182:function(e,n,t){n.Z=t.p+"assets/images/data-response-2b248c9098d5407d641c08fb823119a6.png"}}]);