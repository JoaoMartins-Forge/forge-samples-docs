"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[592],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,w=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return n?o.createElement(w,l(l({ref:t},d),{},{components:n})):o.createElement(w,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4173:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var o=n(7462),i=n(3366),r=(n(7294),n(3905)),l=["components"],a={sidebar_position:4},s="Viewer & UI",p={unversionedId:"tutorials/simple-viewer/dotnet/viewer",id:"tutorials/simple-viewer/dotnet/viewer",isDocsHomePage:!1,title:"Viewer & UI",description:"Finally, we're ready to build the client-side piece of our application.",source:"@site/docs/tutorials/simple-viewer/dotnet/viewer.md",sourceDirName:"tutorials/simple-viewer/dotnet",slug:"/tutorials/simple-viewer/dotnet/viewer",permalink:"/forge-samples-docs/cz/docs/tutorials/simple-viewer/dotnet/viewer",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/main/website/docs/tutorials/simple-viewer/dotnet/viewer.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Data Management",permalink:"/forge-samples-docs/cz/docs/tutorials/simple-viewer/dotnet/data"},next:{title:"Introduction",permalink:"/forge-samples-docs/cz/docs/tutorials/hubs-browser/index"}},d=[{value:"Viewer logic",id:"viewer-logic",children:[]},{value:"Application logic",id:"application-logic",children:[]},{value:"User interface",id:"user-interface",children:[]},{value:"Try it out",id:"try-it-out",children:[]}],c={toc:d};function u(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"viewer--ui"},"Viewer & UI"),(0,r.kt)("p",null,"Finally, we're ready to build the client-side piece of our application."),(0,r.kt)("h2",{id:"viewer-logic"},"Viewer logic"),(0,r.kt)("p",null,"Let's start by implementing the Forge Viewer functionality of our application.\nCreate a ",(0,r.kt)("inlineCode",{parentName:"p"},"viewer.js")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"wwwroot")," subfolder with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/viewer.js"',title:'"wwwroot/viewer.js"'},"export async function initViewer(container) {\n    async function getAccessToken(callback) {\n        const resp = await fetch('/api/auth/token');\n        if (resp.ok) {\n            const { access_token, expires_in } = await resp.json();\n            callback(access_token, expires_in);\n        } else {\n            alert('Could not obtain access token. See the console for more details.');\n            console.error(await resp.text());\n        }\n    }\n    return new Promise(function (resolve, reject) {\n        Autodesk.Viewing.Initializer({ getAccessToken }, async function () {\n            const viewer = new Autodesk.Viewing.GuiViewer3D(container);\n            viewer.start();\n            viewer.setTheme('light-theme');\n            resolve(viewer);\n        });\n    });\n}\n\nexport function loadModel(viewer, urn) {\n    function onDocumentLoadSuccess(doc) {\n        viewer.loadDocumentNode(doc, doc.getRoot().getDefaultGeometry());\n    }\n    function onDocumentLoadFailure(code, message) {\n        alert('Could not load model. See the console for more details.');\n        console.error(message);\n    }\n    Autodesk.Viewing.Document.load('urn:' + urn, onDocumentLoadSuccess, onDocumentLoadFailure);\n}\n")),(0,r.kt)("p",null,"The script is an ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"},"ES6 module"),"\nthat exports two functions, ",(0,r.kt)("inlineCode",{parentName:"p"},"initViewer")," that will create a new instance of Forge Viewer\nin the specified DOM container, and ",(0,r.kt)("inlineCode",{parentName:"p"},"loadModel")," which can load a specific model to the viewer."),(0,r.kt)("h2",{id:"application-logic"},"Application logic"),(0,r.kt)("p",null,"Next, let's define the logic of the application itself. We will need to populate\nthe UI with all models available for viewing, and also the UI for uploading and\ntranslating new models. Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"main.js")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"wwwroot")," subfolder with\nthe following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/main.js"',title:'"wwwroot/main.js"'},"import { initViewer, loadModel } from './viewer.js';\n\ninitViewer(document.getElementById('preview')).then(viewer => {\n    const urn = window.location.hash ? window.location.hash.substr(1) : null;\n    setupModelSelection(viewer, urn);\n    setupModelUpload(viewer);\n});\n\nasync function setupModelSelection(viewer, selectedUrn) {\n    const models = document.getElementById('models');\n    models.innerHTML = '';\n    const resp = await fetch('/api/models');\n    if (resp.ok) {\n        for (const model of await resp.json()) {\n            const option = document.createElement('option');\n            option.innerText = model.name;\n            option.setAttribute('value', model.urn);\n            if (model.urn === selectedUrn) {\n                option.setAttribute('selected', 'true');\n            }\n            models.appendChild(option);\n        }\n    } else {\n        alert('Could not list models. See the console for more details.');\n        console.error(await resp.text());\n    }\n    models.onchange = () => {\n        window.location.hash = models.value;\n        loadModel(viewer, models.value);\n    }\n    if (!viewer.model && models.value) {\n        models.onchange();\n    }\n}\n\nasync function setupModelUpload(viewer) {\n    const button = document.getElementById('upload');\n    const input = document.getElementById('input');\n    button.addEventListener('click', async function () {\n        input.click();\n    });\n    input.addEventListener('change', async function () {\n        if (input.files.length !== 1) {\n            return;\n        }\n        const file = input.files[0];\n        let data = new FormData();\n        data.append('model-file', file);\n        // When uploading a zip file, ask for the main design file in the archive\n        if (file.name.endsWith('.zip')) {\n            const entrypoint = window.prompt('Please enter the filename of the main design inside the archive.');\n            data.append('model-zip-entrypoint', entrypoint);\n        }\n        const resp = await fetch('/api/models', { method: 'POST', body: data });\n        if (resp.ok) {\n            input.value = '';\n            setupModelSelection(viewer);\n        } else {\n            alert('Could not upload model. See the console for more details.');\n            console.error(await resp.text());\n        }\n    });\n}\n")),(0,r.kt)("p",null,"The scripts will initialize the viewer, and after that it will populate a dropdown element\nin the UI with models retrieved from the ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/models")," endpoint, and setup the file upload UI.\nNote that when the uploaded file has a ",(0,r.kt)("inlineCode",{parentName:"p"},".zip")," extension, the JavaScript logic will also prompt\nthe user for the name of the file ",(0,r.kt)("strong",{parentName:"p"},"inside the archive")," that should be converted by Forge."),(0,r.kt)("h2",{id:"user-interface"},"User interface"),(0,r.kt)("p",null,"And finally, let's build the UI of our application."),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"main.css")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"wwwroot")," subfolder, and populate it with the following\nCSS rules:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="wwwroot/main.css"',title:'"wwwroot/main.css"'},"body, html {\n    margin: 0;\n    padding: 0;\n    height: 100vh;\n}\n\n#header, #preview {\n    position: absolute;\n    width: 100%;\n}\n\n#header {\n    height: 3em;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    align-items: center;\n}\n\n#preview {\n    top: 3em;\n    bottom: 0;\n}\n\n#header > * {\n    height: 2em;\n    margin: 0 0.5em;\n    font-family: ArtifaktElement; /* Will be added by Forge Viewer */\n    font-size: 1em;\n}\n\n#header .title {\n    flex: 1 0 auto;\n    height: auto;\n}\n\n#models {\n    flex: 0 1 auto;\n    min-width: 2em;\n}\n")),(0,r.kt)("p",null,"Then, create an ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," file (also in the ",(0,r.kt)("inlineCode",{parentName:"p"},"wwwroot")," subfolder) with the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="wwwroot/index.html"',title:'"wwwroot/index.html"'},'<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\n    <link rel="stylesheet" href="https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/style.css">\n    <link rel="stylesheet" href="/main.css">\n    <title>Autodesk Forge: Simple Viewer</title>\n</head>\n\n<body>\n    <div id="header">\n        <img class="logo" src="/logo.png" alt="Autodesk Forge">\n        <span class="title">Simple Viewer</span>\n        <select name="models" id="models"></select>\n        <button id="upload" title="Upload New Model">Upload</button>\n        <input style="display: none" type="file" id="input">\n    </div>\n    <div id="preview"></div>\n    <script src="https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/viewer3D.js"><\/script>\n    <script src="/main.js" type="module"><\/script>\n</body>\n\n</html>\n')),(0,r.kt)("p",null,"The HTML markup simply uses a ",(0,r.kt)("inlineCode",{parentName:"p"},"<select>")," element as the dropdown for listing the viewable models,\nand an ",(0,r.kt)("inlineCode",{parentName:"p"},'<input type="file">')," element with a ",(0,r.kt)("inlineCode",{parentName:"p"},"<button>")," to handle the uploading of a new model."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note that since ",(0,r.kt)("inlineCode",{parentName:"p"},"wwwroot/main.js")," is also an ES6 module, we have to use ",(0,r.kt)("inlineCode",{parentName:"p"},'type="module"'),"\nin its ",(0,r.kt)("inlineCode",{parentName:"p"},"<script>")," tag.")),(0,r.kt)("p",null,"The application will look for ",(0,r.kt)("inlineCode",{parentName:"p"},"favicon.ico")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"logo.png")," images under the ",(0,r.kt)("inlineCode",{parentName:"p"},"wwwroot")," folder to use\nas the website's icon and logo. If you don't have any images of your own, feel free to download\nthem from one of our samples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/petrbroz/forge-simple-viewer-nodejs/blob/develop/public/favicon.ico"},"https://github.com/petrbroz/forge-simple-viewer-nodejs/blob/develop/public/favicon.ico")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/petrbroz/forge-simple-viewer-nodejs/blob/develop/public/logo.png"},"https://github.com/petrbroz/forge-simple-viewer-nodejs/blob/develop/public/logo.png"))),(0,r.kt)("h2",{id:"try-it-out"},"Try it out"),(0,r.kt)("p",null,"And that's it! Your application is now ready for action. Start it from the command line as usual:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export FORGE_CLIENT_ID=your-own-forge-client-id\nexport FORGE_CLIENT_SECRET=your-own-forge-client-secret\nexport FORGE_BUCKET=your-custom-bucket-name\ndotnet run\n")),(0,r.kt)("p",null,"And then navigate to https://localhost:5001 in your browser. You should be presented with a simple UI,\nwith a dropdown in the top-right corner that will eventually get populated with all models available\nin your configured bucket, and with a button for uploading new models. And as soon as you select one\nof the options from the dropdown, the corresponding model will get loaded in the viewer that occupies\nthe rest of the webpage."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Final App",src:n(6945).Z})))}u.isMDXComponent=!0},6945:function(e,t,n){t.Z=n.p+"assets/images/final-app-e22577b435e63247d263e62a9a0c4221.png"}}]);