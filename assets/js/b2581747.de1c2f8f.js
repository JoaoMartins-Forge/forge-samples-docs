"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[663],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=i,k=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(k,o(o({ref:n},p),{},{components:t})):a.createElement(k,o({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6797:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],s={sidebar_position:3},l="Model Management",c={unversionedId:"tutorials/simple-viewer/dotnet-vs2022/models",id:"tutorials/simple-viewer/dotnet-vs2022/models",title:"Model Management",description:"Next, let's extend our server so that we can list models, upload them, and also initiate",source:"@site/docs/tutorials/01-simple-viewer/dotnet-vs2022/03-models.mdx",sourceDirName:"tutorials/01-simple-viewer/dotnet-vs2022",slug:"/tutorials/simple-viewer/dotnet-vs2022/models",permalink:"/forge-samples-docs/docs/tutorials/simple-viewer/dotnet-vs2022/models",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/master/docs/tutorials/01-simple-viewer/dotnet-vs2022/03-models.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Authentication",permalink:"/forge-samples-docs/docs/tutorials/simple-viewer/dotnet-vs2022/auth"},next:{title:"Viewer & UI",permalink:"/forge-samples-docs/docs/tutorials/simple-viewer/dotnet-vs2022/viewer"}},p={},u=[{value:"Preparing a bucket",id:"preparing-a-bucket",level:2},{value:"Listing and uploading models",id:"listing-and-uploading-models",level:2},{value:"Translating models",id:"translating-models",level:2},{value:"Server endpoints",id:"server-endpoints",level:2},{value:"Try it out",id:"try-it-out",level:2}],d={toc:u};function m(e){var n=e.components,s=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,s,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"model-management"},"Model Management"),(0,r.kt)("p",null,"Next, let's extend our server so that we can list models, upload them, and also initiate\ntheir translation for viewing."),(0,r.kt)("h2",{id:"preparing-a-bucket"},"Preparing a bucket"),(0,r.kt)("p",null,"First, let's make sure that our application has a bucket in the Data Management service\nto store its files in. Typically the bucket would be created just once as part of a provisioning\nstep but in our sample we will implement a helper function that will make sure that the bucket\nis available. Let's update the ",(0,r.kt)("inlineCode",{parentName:"p"},"Models/ForgeService.cs")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/ForgeService.cs"',title:'"Models/ForgeService.cs"'},'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Autodesk.Forge;\nusing Autodesk.Forge.Client;\nusing Autodesk.Forge.Model;\n\npublic record Token(string AccessToken, DateTime ExpiresAt);\n\npublic class ForgeService\n{\n    private readonly string _clientId;\n    private readonly string _clientSecret;\n    // highlight-start\n    private readonly string _bucket;\n    // highlight-end\n    private Token _internalTokenCache;\n    private Token _publicTokenCache;\n\n    public ForgeService(string clientId, string clientSecret, string bucket = null)\n    {\n        _clientId = clientId;\n        _clientSecret = clientSecret;\n        // highlight-start\n        _bucket = string.IsNullOrEmpty(bucket) ? string.Format("{0}-basic-app", _clientId.ToLower()) : bucket;\n        // highlight-end\n    }\n\n    private async Task<Token> GetToken(Scope[] scopes)\n    {\n        dynamic auth = await new TwoLeggedApi().AuthenticateAsync(_clientId, _clientSecret, "client_credentials", scopes);\n        return new Token(auth.access_token, DateTime.UtcNow.AddSeconds(auth.expires_in));\n    }\n\n    public async Task<Token> GetPublicToken()\n    {\n        if (_publicTokenCache == null || _publicTokenCache.ExpiresAt < DateTime.UtcNow)\n            _publicTokenCache = await GetToken(new Scope[] { Scope.ViewablesRead });\n        return _publicTokenCache;\n    }\n\n    private async Task<Token> GetInternalToken()\n    {\n        if (_internalTokenCache == null || _internalTokenCache.ExpiresAt < DateTime.UtcNow)\n            _internalTokenCache = await GetToken(new Scope[] { Scope.BucketCreate, Scope.BucketRead, Scope.DataRead, Scope.DataWrite, Scope.DataCreate });\n        return _internalTokenCache;\n    }\n\n    // highlight-start\n    private async Task EnsureBucketExists(string bucketKey)\n    {\n        var token = await GetInternalToken();\n        var api = new BucketsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        try\n        {\n            await api.GetBucketDetailsAsync(bucketKey);\n        }\n        catch (ApiException e)\n        {\n            if (e.ErrorCode == 404)\n            {\n                await api.CreateBucketAsync(new PostBucketsPayload(bucketKey, null, PostBucketsPayload.PolicyKeyEnum.Temporary));\n            }\n            else\n            {\n                throw e;\n            }\n        }\n    }\n    // highlight-end\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"EnsureBucketExists")," method will simply try and request additional information\nabout a specific bucket, and if the response from Forge is ",(0,r.kt)("inlineCode",{parentName:"p"},"404 Not Found"),", it will\nattempt to create a new bucket with that name."),(0,r.kt)("h2",{id:"listing-and-uploading-models"},"Listing and uploading models"),(0,r.kt)("p",null,"Now we will update the ",(0,r.kt)("inlineCode",{parentName:"p"},"ForgeService")," class with a helper method that will list all objects in the preconfigured bucket, and a helper method for uploading additional\nfiles to this bucket:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/ForgeService.cs"',title:'"Models/ForgeService.cs"'},'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Autodesk.Forge;\nusing Autodesk.Forge.Client;\nusing Autodesk.Forge.Model;\n\npublic record Token(string AccessToken, DateTime ExpiresAt);\n\npublic class ForgeService\n{\n    private readonly string _clientId;\n    private readonly string _clientSecret;\n    private readonly string _bucket;\n    private Token _internalTokenCache;\n    private Token _publicTokenCache;\n\n    public ForgeService(string clientId, string clientSecret, string bucket = null)\n    {\n        _clientId = clientId;\n        _clientSecret = clientSecret;\n        _bucket = string.IsNullOrEmpty(bucket) ? string.Format("{0}-basic-app", _clientId.ToLower()) : bucket;\n    }\n\n    private async Task<Token> GetToken(Scope[] scopes)\n    {\n        dynamic auth = await new TwoLeggedApi().AuthenticateAsync(_clientId, _clientSecret, "client_credentials", scopes);\n        return new Token(auth.access_token, DateTime.UtcNow.AddSeconds(auth.expires_in));\n    }\n\n    public async Task<Token> GetPublicToken()\n    {\n        if (_publicTokenCache == null || _publicTokenCache.ExpiresAt < DateTime.UtcNow)\n            _publicTokenCache = await GetToken(new Scope[] { Scope.ViewablesRead });\n        return _publicTokenCache;\n    }\n\n    private async Task<Token> GetInternalToken()\n    {\n        if (_internalTokenCache == null || _internalTokenCache.ExpiresAt < DateTime.UtcNow)\n            _internalTokenCache = await GetToken(new Scope[] { Scope.BucketCreate, Scope.BucketRead, Scope.DataRead, Scope.DataWrite, Scope.DataCreate });\n        return _internalTokenCache;\n    }\n\n    private async Task EnsureBucketExists(string bucketKey)\n    {\n        var token = await GetInternalToken();\n        var api = new BucketsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        try\n        {\n            await api.GetBucketDetailsAsync(bucketKey);\n        }\n        catch (ApiException e)\n        {\n            if (e.ErrorCode == 404)\n            {\n                await api.CreateBucketAsync(new PostBucketsPayload(bucketKey, null, PostBucketsPayload.PolicyKeyEnum.Temporary));\n            }\n            else\n            {\n                throw e;\n            }\n        }\n    }\n\n    // highlight-start\n    public async Task<ObjectDetails> UploadModel(string objectName, Stream content, long contentLength)\n    {\n        await EnsureBucketExists(_bucket);\n        var token = await GetInternalToken();\n        var api = new ObjectsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var obj = (await api.UploadObjectAsync(_bucket, objectName, (int)contentLength, content)).ToObject<ObjectDetails>();\n        return obj;\n    }\n\n    public async Task<IEnumerable<ObjectDetails>> GetObjects()\n    {\n        const int PageSize = 64;\n        await EnsureBucketExists(_bucket);\n        var token = await GetInternalToken();\n        var api = new ObjectsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var results = new List<ObjectDetails>();\n        var response = (await api.GetObjectsAsync(_bucket, PageSize)).ToObject<BucketObjects>();\n        results.AddRange(response.Items);\n        while (!string.IsNullOrEmpty(response.Next))\n        {\n            var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(response.Next).Query);\n            response = (await api.GetObjectsAsync(_bucket, PageSize, null, queryParams["startAt"])).ToObject<BucketObjects>();\n            results.AddRange(response.Items);\n        }\n        return results;\n    }\n    // highlight-end\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GetObjects")," method pages through all objects in the bucket, and returns their name and URN\n(the base64-encoded ID that will later be used when communicating with the Model Derivative service)."),(0,r.kt)("h2",{id:"translating-models"},"Translating models"),(0,r.kt)("p",null,"Finally, we will implement a couple of helper functions that will extract various types of information\nfrom the uploaded files - for example, 2D drawings, 3D geometry, and metadata - that we can later load\ninto the Forge Viewer component in our HTML page. To do so, we will need to start a new conversion job\nin the ",(0,r.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/model-derivative/v2/developers_guide/overview"},"Model Derivative"),"\nservice, and checking the status of the conversion. Also, the Model Derivative service requires all IDs\nwe use in the API calls to be ",(0,r.kt)("a",{parentName:"p",href:"https://wikipedia.org/wiki/Base64"},"base64"),"-encoded, so we include a small\nutility function that will help with that."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Base64-encoded IDs are referred to as ",(0,r.kt)("em",{parentName:"p"},"URNs"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/ForgeService.cs"',title:'"Models/ForgeService.cs"'},'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Autodesk.Forge;\nusing Autodesk.Forge.Client;\nusing Autodesk.Forge.Model;\n\npublic record Token(string AccessToken, DateTime ExpiresAt);\n\n// highlight-start\npublic record TranslationStatus(string Status, string Progress, IEnumerable<string>? Messages);\n// highlight-end\n\npublic class ForgeService\n{\n    private readonly string _clientId;\n    private readonly string _clientSecret;\n    private readonly string _bucket;\n    private Token _internalTokenCache;\n    private Token _publicTokenCache;\n\n    public ForgeService(string clientId, string clientSecret, string bucket = null)\n    {\n        _clientId = clientId;\n        _clientSecret = clientSecret;\n        _bucket = string.IsNullOrEmpty(bucket) ? string.Format("{0}-basic-app", _clientId.ToLower()) : bucket;\n    }\n\n    private async Task<Token> GetToken(Scope[] scopes)\n    {\n        dynamic auth = await new TwoLeggedApi().AuthenticateAsync(_clientId, _clientSecret, "client_credentials", scopes);\n        return new Token(auth.access_token, DateTime.UtcNow.AddSeconds(auth.expires_in));\n    }\n\n    public async Task<Token> GetPublicToken()\n    {\n        if (_publicTokenCache == null || _publicTokenCache.ExpiresAt < DateTime.UtcNow)\n            _publicTokenCache = await GetToken(new Scope[] { Scope.ViewablesRead });\n        return _publicTokenCache;\n    }\n\n    private async Task<Token> GetInternalToken()\n    {\n        if (_internalTokenCache == null || _internalTokenCache.ExpiresAt < DateTime.UtcNow)\n            _internalTokenCache = await GetToken(new Scope[] { Scope.BucketCreate, Scope.BucketRead, Scope.DataRead, Scope.DataWrite, Scope.DataCreate });\n        return _internalTokenCache;\n    }\n\n    private async Task EnsureBucketExists(string bucketKey)\n    {\n        var token = await GetInternalToken();\n        var api = new BucketsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        try\n        {\n            await api.GetBucketDetailsAsync(bucketKey);\n        }\n        catch (ApiException e)\n        {\n            if (e.ErrorCode == 404)\n            {\n                await api.CreateBucketAsync(new PostBucketsPayload(bucketKey, null, PostBucketsPayload.PolicyKeyEnum.Temporary));\n            }\n            else\n            {\n                throw e;\n            }\n        }\n    }\n\n    public async Task<ObjectDetails> UploadModel(string objectName, Stream content, long contentLength)\n    {\n        await EnsureBucketExists(_bucket);\n        var token = await GetInternalToken();\n        var api = new ObjectsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var obj = (await api.UploadObjectAsync(_bucket, objectName, (int)contentLength, content)).ToObject<ObjectDetails>();\n        return obj;\n    }\n\n    public async Task<IEnumerable<ObjectDetails>> GetObjects()\n    {\n        const int PageSize = 64;\n        await EnsureBucketExists(_bucket);\n        var token = await GetInternalToken();\n        var api = new ObjectsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var results = new List<ObjectDetails>();\n        var response = (await api.GetObjectsAsync(_bucket, PageSize)).ToObject<BucketObjects>();\n        results.AddRange(response.Items);\n        while (!string.IsNullOrEmpty(response.Next))\n        {\n            var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(response.Next).Query);\n            response = (await api.GetObjectsAsync(_bucket, PageSize, null, queryParams["startAt"])).ToObject<BucketObjects>();\n            results.AddRange(response.Items);\n        }\n        return results;\n    }\n\n    // highlight-start\n    public static string Base64Encode(string plainText)\n    {\n        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);\n        return System.Convert.ToBase64String(plainTextBytes).TrimEnd(\'=\');\n    }\n\n    public async Task<Job> TranslateModel(string objectId, string rootFilename)\n    {\n        var token = await GetInternalToken();\n        var api = new DerivativesApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var formats = new List<JobPayloadItem> {\n            new JobPayloadItem (JobPayloadItem.TypeEnum.Svf, new List<JobPayloadItem.ViewsEnum> { JobPayloadItem.ViewsEnum._2d, JobPayloadItem.ViewsEnum._2d })\n        };\n        var payload = new JobPayload(\n            new JobPayloadInput(Base64Encode(objectId)),\n            new JobPayloadOutput(formats)\n        );\n        if (!string.IsNullOrEmpty(rootFilename))\n        {\n            payload.Input.RootFilename = rootFilename;\n            payload.Input.CompressedUrn = true;\n        }\n        var job = (await api.TranslateAsync(payload)).ToObject<Job>();\n        return job;\n    }\n\n    public async Task<TranslationStatus> GetTranslationStatus(string urn)\n    {\n        var token = await GetInternalToken();\n        var api = new DerivativesApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var json = (await api.GetManifestAsync(urn)).ToJson();\n        var messages = new List<string>();\n        foreach (var message in json.SelectTokens("$.derivatives[*].messages[?(@.type == \'error\')].message"))\n        {\n            if (message.Type == Newtonsoft.Json.Linq.JTokenType.String)\n                messages.Add((string)message);\n        }\n        foreach (var message in json.SelectTokens("$.derivatives[*].children[*].messages[?(@.type == \'error\')].message"))\n        {\n            if (message.Type == Newtonsoft.Json.Linq.JTokenType.String)\n                messages.Add((string)message);\n        }\n        return new TranslationStatus((string)json["status"], (string)json["progress"], messages);\n    }\n    // highlight-end\n}\n')),(0,r.kt)("h2",{id:"server-endpoints"},"Server endpoints"),(0,r.kt)("p",null,"Finally, let's expose this new functionality to the client-side code through another ASP.NET\ncontroller. Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelsController.cs")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"Controllers")," subfolder\nwith the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Controllers/ModelsController.cs"',title:'"Controllers/ModelsController.cs"'},'using System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\n\n[ApiController]\n[Route("api/[controller]")]\npublic class ModelsController : ControllerBase\n{\n    public record BucketObject(string name, string urn);\n\n    private readonly ForgeService _forgeService;\n\n    public ModelsController(ForgeService forgeService)\n    {\n        _forgeService = forgeService;\n    }\n\n    [HttpGet()]\n    public async Task<IEnumerable<BucketObject>> GetModels()\n    {\n        var objects = await _forgeService.GetObjects();\n        return from o in objects\n               select new BucketObject(o.ObjectKey, ForgeService.Base64Encode(o.ObjectId));\n    }\n\n    [HttpGet("{urn}/status")]\n    public async Task<TranslationStatus> GetModelStatus(string urn)\n    {\n        try\n        {\n            var status = await _forgeService.GetTranslationStatus(urn);\n            return status;\n        }\n        catch (Autodesk.Forge.Client.ApiException ex)\n        {\n            if (ex.ErrorCode == 404)\n                return new TranslationStatus("n/a", "", new List<string>());\n            else\n                throw ex;\n        }\n    }\n\n    public class UploadModelForm\n    {\n        [FromForm(Name = "model-zip-entrypoint")]\n        public string? Entrypoint { get; set; }\n\n        [FromForm(Name = "model-file")]\n        public IFormFile File { get; set; }\n    }\n\n    [HttpPost()]\n    public async Task<BucketObject> UploadAndTranslateModel([FromForm] UploadModelForm form)\n    {\n        using (var stream = new MemoryStream())\n        {\n            await form.File.CopyToAsync(stream);\n            stream.Position = 0;\n            var obj = await _forgeService.UploadModel(form.File.FileName, stream, form.File.Length);\n            var job = await _forgeService.TranslateModel(obj.ObjectId, form.Entrypoint);\n            return new BucketObject(obj.ObjectKey, job.Urn);\n        }\n    }\n}\n')),(0,r.kt)("p",null,"The controller will handle 3 types of requests:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /api/models")," - when the client wants to get the list of all models available for viewing"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /api/models/:urn/status")," - used to check the status of the conversion (incl. error messages if there are any)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"POST /api/models")," - when the client wants to upload a new model and start its translation")),(0,r.kt)("h2",{id:"try-it-out"},"Try it out"),(0,r.kt)("p",null,"Time to test our improved server application. This time, apart from setting the Forge application\ncredentials, you can also include the name of the Data Management bucket you want to use via\nthe optional ",(0,r.kt)("inlineCode",{parentName:"p"},"FORGE_BUCKET")," environment variable."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If the bucket name is ",(0,r.kt)("em",{parentName:"p"},"not")," provided, the ",(0,r.kt)("inlineCode",{parentName:"p"},"ForgeService")," class will generate one by appending ",(0,r.kt)("inlineCode",{parentName:"p"},"-basic-app"),"\nto your Forge client ID."))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Note that the Data Management service requires bucket names to be ",(0,r.kt)("strong",{parentName:"p"},"globally unique"),",\nand attempts to create a bucket with an already used name will fail with ",(0,r.kt)("inlineCode",{parentName:"p"},"409 Conflict"),".\nSee the ",(0,r.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/data/v2/reference/http/buckets-POST"},"documentation"),"\nfor more details."))),(0,r.kt)("p",null,"When you start the application and navigate to ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:8080/api/models"},"http://localhost:8080/api/models"),",\nthe server should respond with a JSON list with the names and URNs of all objects\navailable in your Data Management bucket."),(0,r.kt)("p",null,(0,r.kt)("img",{loading:"lazy",alt:"Server Response",src:t(9959).Z,width:"1500",height:"929"})),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you are just getting started, you may get a JSON response with an empty array (",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),")\nwhich is expected. In the screenshot below we can already see a couple of files that were\nuploaded to our bucket in the past."))))}m.isMDXComponent=!0},9959:function(e,n,t){n.Z=t.p+"assets/images/data-response-9828fb41c871b732254686dfac6640ae.png"}}]);