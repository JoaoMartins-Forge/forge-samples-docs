"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[609],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||r;return n?i.createElement(m,o(o({ref:t},u),{},{components:n})):i.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6612:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],s={sidebar_position:3},l="Data Management",c={unversionedId:"tutorials/simple-viewer/nodejs/data",id:"tutorials/simple-viewer/nodejs/data",isDocsHomePage:!1,title:"Data Management",description:"Next, let's extend our server so that we can list models, upload them, and also initiate",source:"@site/docs/tutorials/simple-viewer/nodejs/data.md",sourceDirName:"tutorials/simple-viewer/nodejs",slug:"/tutorials/simple-viewer/nodejs/data",permalink:"/forge-samples-docs/docs/tutorials/simple-viewer/nodejs/data",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/master/website/docs/tutorials/simple-viewer/nodejs/data.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Authentication",permalink:"/forge-samples-docs/docs/tutorials/simple-viewer/nodejs/auth"},next:{title:"Viewer & UI",permalink:"/forge-samples-docs/docs/tutorials/simple-viewer/nodejs/viewer"}},u=[{value:"Preparing a bucket",id:"preparing-a-bucket",children:[]},{value:"Listing models",id:"listing-models",children:[]},{value:"Uploading and translating models",id:"uploading-and-translating-models",children:[]},{value:"Server endpoints",id:"server-endpoints",children:[]},{value:"Try it out",id:"try-it-out",children:[]}],p={toc:u};function d(e){var t=e.components,s=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-management"},"Data Management"),(0,r.kt)("p",null,"Next, let's extend our server so that we can list models, upload them, and also initiate\ntheir translation for viewing."),(0,r.kt)("h2",{id:"preparing-a-bucket"},"Preparing a bucket"),(0,r.kt)("p",null,"First, let's make sure that our application has a bucket in the Data Management service\nto store its files in. Typically the bucket would be created just once as part of a provisioning\nstep but in our sample we will implement a helper function that will make sure that the bucket\nis available. Let's update the ",(0,r.kt)("inlineCode",{parentName:"p"},"services/forge.js")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="services/forge.js"',title:'"services/forge.js"'},"// highlight-start\nconst { AuthClientTwoLegged, BucketsApi } = require('forge-apis');\n// highlight-end\n\nconst { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, FORGE_BUCKET } = process.env;\nif (!FORGE_CLIENT_ID || !FORGE_CLIENT_SECRET) {\n    console.warn('Missing some of the environment variables.');\n    process.exit(1);\n}\n// highlight-start\nconst BUCKET = FORGE_BUCKET || `${FORGE_CLIENT_ID.toLowerCase()}-basic-app`;\n// highlight-end\nconst INTERNAL_TOKEN_SCOPES = ['bucket:read', 'bucket:create', 'data:read', 'data:write', 'data:create'];\nconst PUBLIC_TOKEN_SCOPES = ['viewables:read'];\n\nlet internalAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, INTERNAL_TOKEN_SCOPES, true);\nlet publicAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, PUBLIC_TOKEN_SCOPES, true);\n\nasync function getInternalToken() {\n    if (!internalAuthClient.isAuthorized()) {\n        await internalAuthClient.authenticate();\n    }\n    return internalAuthClient.getCredentials();\n}\n\nasync function getPublicToken() {\n    if (!publicAuthClient.isAuthorized()) {\n        await publicAuthClient.authenticate();\n    }\n    return publicAuthClient.getCredentials();\n}\n\n// highlight-start\nasync function ensureBucketExists() {\n    const token = await getInternalToken();\n    try {\n        await new BucketsApi().getBucketDetails(BUCKET, null, token);\n    } catch (err) {\n        if (err.statusCode === 404) {\n            await new BucketsApi().createBucket({ bucketKey: BUCKET, policyKey: 'temporary' }, {}, null, token);\n        } else {\n            throw err;\n        }\n    }\n}\n// highlight-end\n\nmodule.exports = {\n    getPublicToken\n};\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ensureBucketExists")," function will simply try and request additional information\nabout a specific bucket, and if the response from Forge is ",(0,r.kt)("inlineCode",{parentName:"p"},"404 Not Found"),", it will\nattempt to create a new bucket of that name."),(0,r.kt)("h2",{id:"listing-models"},"Listing models"),(0,r.kt)("p",null,"Now we will update the ",(0,r.kt)("inlineCode",{parentName:"p"},"services/forge.js")," script with a helper function that will\nlist all objects in the preconfigured bucket:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="services/forge.js"',title:'"services/forge.js"'},"// highlight-start\nconst { AuthClientTwoLegged, BucketsApi, ObjectsApi } = require('forge-apis');\n// highlight-end\n\nconst { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, FORGE_BUCKET } = process.env;\nconst { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET } = process.env;\nif (!FORGE_CLIENT_ID || !FORGE_CLIENT_SECRET) {\n    console.warn('Missing some of the environment variables.');\n    process.exit(1);\n}\nconst INTERNAL_TOKEN_SCOPES = ['bucket:read', 'bucket:create', 'data:read', 'data:write', 'data:create'];\nconst PUBLIC_TOKEN_SCOPES = ['viewables:read'];\n\nlet internalAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, INTERNAL_TOKEN_SCOPES, true);\nlet publicAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, PUBLIC_TOKEN_SCOPES, true);\n\n// highlight-start\nconst urnify = (id) => Buffer.from(id).toString('base64').replace(/=/g, '');\n// highlight-end\n\nasync function getInternalToken() {\n    if (!internalAuthClient.isAuthorized()) {\n        await internalAuthClient.authenticate();\n    }\n    return internalAuthClient.getCredentials();\n}\n\nasync function getPublicToken() {\n    if (!publicAuthClient.isAuthorized()) {\n        await publicAuthClient.authenticate();\n    }\n    return publicAuthClient.getCredentials();\n}\n\nasync function ensureBucketExists() {\n    const token = await getInternalToken();\n    try {\n        await new BucketsApi().getBucketDetails(BUCKET, null, token);\n    } catch (err) {\n        if (err.statusCode === 404) {\n            await new BucketsApi().createBucket({ bucketKey: BUCKET, policyKey: 'temporary' }, {}, null, token);\n        } else {\n            throw err;\n        }\n    }\n}\n\n// highlight-start\nasync function listModels() {\n    await ensureBucketExists(); // Remove this if we can assume the bucket to exist\n    const token = await getInternalToken();\n    let response = await new ObjectsApi().getObjects(BUCKET, { limit: 64 }, null, token);\n    let objects = response.body.items;\n    while (response.body.next) {\n        const startAt = new URL(response.body.next).searchParams.get('startAt');\n        response = await new ObjectsApi().getObjects(BUCKET, { limit: 64, startAt }, null, token);\n        objects = objects.concat(response.body.items);\n    }\n    return objects.map(obj => ({\n        name: obj.objectKey,\n        urn: urnify(obj.objectId)\n    }));\n}\n// highlight-end\n\nmodule.exports = {\n    getPublicToken,\n    // highlight-start\n    listModels,\n    // highlight-end\n};\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"listModels")," function pages through all objects in the bucket, and returns their name and URN\n(the base64-encoded ID that will later be used when communicating with the Model Derivative service)."),(0,r.kt)("h2",{id:"uploading-and-translating-models"},"Uploading and translating models"),(0,r.kt)("p",null,"The last helper function we add to ",(0,r.kt)("inlineCode",{parentName:"p"},"services/forge.js")," will handle the uploading of files\nto the Data Management service, and their translation into a format that can later be loaded into\nForge Viewer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="services/forge.js"',title:'"services/forge.js"'},"// highlight-start\nconst fs = require('fs');\nconst { AuthClientTwoLegged, BucketsApi, ObjectsApi, DerivativesApi } = require('forge-apis');\n// highlight-end\n\nconst { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, FORGE_BUCKET } = process.env;\nif (!FORGE_CLIENT_ID || !FORGE_CLIENT_SECRET) {\n    console.warn('Missing some of the environment variables.');\n    process.exit(1);\n}\nconst BUCKET = FORGE_BUCKET || `${FORGE_CLIENT_ID.toLowerCase()}-basic-app`;\nconst INTERNAL_TOKEN_SCOPES = ['bucket:read', 'bucket:create', 'data:read', 'data:write', 'data:create'];\nconst PUBLIC_TOKEN_SCOPES = ['viewables:read'];\n\nlet internalAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, INTERNAL_TOKEN_SCOPES, true);\nlet publicAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, PUBLIC_TOKEN_SCOPES, true);\n\nconst urnify = (id) => Buffer.from(id).toString('base64').replace(/=/g, '');\n\nasync function getInternalToken() {\n    if (!internalAuthClient.isAuthorized()) {\n        await internalAuthClient.authenticate();\n    }\n    return internalAuthClient.getCredentials();\n}\n\nasync function getPublicToken() {\n    if (!publicAuthClient.isAuthorized()) {\n        await publicAuthClient.authenticate();\n    }\n    return publicAuthClient.getCredentials();\n}\n\nasync function ensureBucketExists() {\n    const token = await getInternalToken();\n    try {\n        await new BucketsApi().getBucketDetails(BUCKET, null, token);\n    } catch (err) {\n        if (err.statusCode === 404) {\n            await new BucketsApi().createBucket({ bucketKey: BUCKET, policyKey: 'temporary' }, {}, null, token);\n        } else {\n            throw err;\n        }\n    }\n}\n\nasync function listModels() {\n    await ensureBucketExists(); // Remove this if we can assume the bucket to exist\n    const token = await getInternalToken();\n    let response = await new ObjectsApi().getObjects(BUCKET, { limit: 64 }, null, token);\n    let objects = response.body.items;\n    while (response.body.next) {\n        const startAt = new URL(response.body.next).searchParams.get('startAt');\n        response = await new ObjectsApi().getObjects(BUCKET, { limit: 64, startAt }, null, token);\n        objects = objects.concat(response.body.items);\n    }\n    return objects.map(obj => ({\n        name: obj.objectKey,\n        urn: urnify(obj.objectId)\n    }));\n}\n\n// highlight-start\nasync function uploadModel(objectName, filePath, rootFilename) {\n    await ensureBucketExists(); // Remove this if we can assume the bucket to exist\n    const token = await getInternalToken();\n    const buffer = fs.readFileSync(filePath);\n    const response = await new ObjectsApi().uploadObject(BUCKET, objectName, buffer.byteLength, buffer, {}, null, token);\n    const job = {\n        input: {\n            urn: urnify(response.body.objectId)\n        },\n        output: {\n            formats: [{ type: 'svf', views: ['2d', '3d'] }]\n        }\n    };\n    if (rootFilename) {\n        job.input.compressedUrn = true;\n        job.input.rootFilename = rootFilename;\n    }\n    await new DerivativesApi().translate(job, {}, null, token);\n}\n// highlight-end\n\nmodule.exports = {\n    getPublicToken,\n    listModels,\n    // highlight-start\n    uploadModel\n    // highlight-end\n};\n")),(0,r.kt)("h2",{id:"server-endpoints"},"Server endpoints"),(0,r.kt)("p",null,"Finally, let's make the functionality available to the client-side code through another\nExpress router. Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"models.js")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"routes")," subfolder with the following\ncontent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="routes/models.js"',title:'"routes/models.js"'},"const express = require('express');\nconst formidable = require('express-formidable');\nconst { listModels, uploadModel } = require('../services/forge.js');\n\nlet router = express.Router();\n\nrouter.get('/', async function (req, res, next) {\n    try {\n        res.json(await listModels());\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.post('/', formidable(), async function (req, res, next) {\n    const file = req.files['model-file'];\n    if (!file) {\n        res.status(400).send('The required field (\"model-file\") is missing.');\n        return;\n    }\n    try {\n        await uploadModel(file.name, file.path, req.fields['model-zip-entrypoint']);\n        res.status(200).end();\n    } catch (err) {\n        next(err);\n    }\n});\n\nmodule.exports = router;\n")),(0,r.kt)("p",null,"The router will handle two types of requests - a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request when the client wants\nto get the list of all available models for viewing, and a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request when the client\nwants to upload a new model and translate it for viewing. The ",(0,r.kt)("inlineCode",{parentName:"p"},"formidable()")," middleware\nused in the ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request handler will make sure that any ",(0,r.kt)("inlineCode",{parentName:"p"},"multipart/form-data")," content\ncoming with the request is parsed and available in the ",(0,r.kt)("inlineCode",{parentName:"p"},"req.files")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"req.fields")," properties."),(0,r.kt)("p",null,"Next, let's mount the router to our server application by modifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"server.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},"const express = require('express');\nconst PORT = process.env.PORT || 3000;\n\nlet app = express();\napp.use(express.static('public'));\napp.use('/api/auth', require('./routes/auth.js'));\n// highlight-start\napp.use('/api/models', require('./routes/models.js'));\n// highlight-end\napp.use(function (err, req, res, next) {\n    console.error(err);\n    res.status(500).send(err.message);\n});\napp.listen(PORT, function () { console.log(`Server listening on port ${PORT}...`); });\n")),(0,r.kt)("p",null,"As you can see, the new router will handle ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," requests coming to the endpoint\n",(0,r.kt)("inlineCode",{parentName:"p"},"/api/models"),"."),(0,r.kt)("h2",{id:"try-it-out"},"Try it out"),(0,r.kt)("p",null,"Time to try our improved server application. This time, apart from setting the Forge application\ncredentials, you can also include the name of the Data Management bucket you want to use via\nthe optional ",(0,r.kt)("inlineCode",{parentName:"p"},"FORGE_BUCKET")," environment variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export FORGE_CLIENT_ID=your-own-forge-client-id\nexport FORGE_CLIENT_SECRET=your-own-forge-client-secret\nexport FORGE_BUCKET=your-custom-bucket-name\nnpm start\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If the bucket name is ",(0,r.kt)("em",{parentName:"p"},"not")," provided, the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"services/forge.js")," will generate one by appending ",(0,r.kt)("inlineCode",{parentName:"p"},"-basic-app"),"\nto your Forge client ID."))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Note that the Data Management service requires bucket names to be ",(0,r.kt)("strong",{parentName:"p"},"globally unique"),",\nand attempts to create a bucket with an already used name will fail with ",(0,r.kt)("inlineCode",{parentName:"p"},"409 Conflict"),".\nSee the ",(0,r.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/data/v2/reference/http/buckets-POST"},"documentation"),"\nfor more details."))),(0,r.kt)("p",null,"When you navigate to ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000/api/models"},"http://localhost:3000/api/models"),"\nin the browser, the server should respond with a JSON list with names and URNs of all objects\navailable in your configured bucket."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Server Response",src:n(3173).Z})))}d.isMDXComponent=!0},3173:function(e,t,n){t.Z=n.p+"assets/images/data-response-2b248c9098d5407d641c08fb823119a6.png"}}]);