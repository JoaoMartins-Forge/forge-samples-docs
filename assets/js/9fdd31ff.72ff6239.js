"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[372],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return h}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=c(t),h=o,b=d["".concat(l,".").concat(h)]||d[h]||p[h]||s;return t?r.createElement(b,i(i({ref:n},u),{},{components:t})):r.createElement(b,i({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=d;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var c=2;c<s;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5790:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return p}});var r=t(7462),o=t(3366),s=(t(7294),t(3905)),i=["components"],a={sidebar_position:3},l="Browsing Hubs",c={unversionedId:"tutorials/hubs-browser/dotnet-vscode/hubs",id:"tutorials/hubs-browser/dotnet-vscode/hubs",title:"Browsing Hubs",description:"In this step we'll extend our server so that we can browse the content of 3rd party",source:"@site/docs/tutorials/02-hubs-browser/dotnet-vscode/03-hubs.mdx",sourceDirName:"tutorials/02-hubs-browser/dotnet-vscode",slug:"/tutorials/hubs-browser/dotnet-vscode/hubs",permalink:"/forge-samples-docs/docs/tutorials/hubs-browser/dotnet-vscode/hubs",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/master/docs/tutorials/02-hubs-browser/dotnet-vscode/03-hubs.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Authentication",permalink:"/forge-samples-docs/docs/tutorials/hubs-browser/dotnet-vscode/auth"},next:{title:"Viewer & UI",permalink:"/forge-samples-docs/docs/tutorials/hubs-browser/dotnet-vscode/viewer"}},u={},p=[{value:"Forge helpers",id:"forge-helpers",level:2},{value:"Server endpoints",id:"server-endpoints",level:2},{value:"Try it out",id:"try-it-out",level:2}],d={toc:p};function h(e){var n=e.components,a=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"browsing-hubs"},"Browsing Hubs"),(0,s.kt)("p",null,"In this step we'll extend our server so that we can browse the content of 3rd party\napplications built with Forge such as BIM 360 Docs or ACC."),(0,s.kt)("h2",{id:"forge-helpers"},"Forge helpers"),(0,s.kt)("p",null,"First, let's add a couple of helper methods to ",(0,s.kt)("inlineCode",{parentName:"p"},"ForgeService")," for browsing through\nData Management hubs, projects, folders, items, and versions. Create a ",(0,s.kt)("inlineCode",{parentName:"p"},"ForgeService.Hubs.cs"),"\nunder the ",(0,s.kt)("inlineCode",{parentName:"p"},"Models")," subfolder with the following content:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/ForgeService.Hubs.cs"',title:'"Models/ForgeService.Hubs.cs"'},"using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Autodesk.Forge;\nusing Autodesk.Forge.Model;\n\npublic partial class ForgeService\n{\n    public async Task<IEnumerable<dynamic>> GetHubs(Tokens tokens)\n    {\n        var hubs = new List<dynamic>();\n        var api = new HubsApi();\n        api.Configuration.AccessToken = tokens.InternalToken;\n        var response = await api.GetHubsAsync();\n        foreach (KeyValuePair<string, dynamic> hub in new DynamicDictionaryItems(response.data))\n        {\n            hubs.Add(hub.Value);\n        }\n        return hubs;\n    }\n\n    public async Task<IEnumerable<dynamic>> GetProjects(string hubId, Tokens tokens)\n    {\n        var projects = new List<dynamic>();\n        var api = new ProjectsApi();\n        api.Configuration.AccessToken = tokens.InternalToken;\n        var response = await api.GetHubProjectsAsync(hubId);\n        foreach (KeyValuePair<string, dynamic> project in new DynamicDictionaryItems(response.data))\n        {\n            projects.Add(project.Value);\n        }\n        return projects;\n    }\n\n    public async Task<IEnumerable<dynamic>> GetContents(string hubId, string projectId, string folderId, Tokens tokens)\n    {\n        var contents = new List<dynamic>();\n        if (string.IsNullOrEmpty(folderId))\n        {\n            var api = new ProjectsApi();\n            api.Configuration.AccessToken = tokens.InternalToken;\n            var response = await api.GetProjectTopFoldersAsync(hubId, projectId);\n            foreach (KeyValuePair<string, dynamic> folders in new DynamicDictionaryItems(response.data))\n            {\n                contents.Add(folders.Value);\n            }\n        }\n        else\n        {\n            var api = new FoldersApi();\n            api.Configuration.AccessToken = tokens.InternalToken;\n            var response = await api.GetFolderContentsAsync(projectId, folderId); // TODO: add paging\n            foreach (KeyValuePair<string, dynamic> item in new DynamicDictionaryItems(response.data))\n            {\n                contents.Add(item.Value);\n            }\n        }\n        return contents;\n    }\n\n    public async Task<IEnumerable<dynamic>> GetVersions(string hubId, string projectId, string itemId, Tokens tokens)\n    {\n        var versions = new List<dynamic>();\n        var api = new ItemsApi();\n        api.Configuration.AccessToken = tokens.InternalToken;\n        var response = await api.GetItemVersionsAsync(projectId, itemId);\n        foreach (KeyValuePair<string, dynamic> version in new DynamicDictionaryItems(response.data))\n        {\n            versions.Add(version.Value);\n        }\n        return versions;\n    }\n}\n")),(0,s.kt)("h2",{id:"server-endpoints"},"Server endpoints"),(0,s.kt)("p",null,"Finally, let's expose the new functionality to the client-side code through another ASP.NET\ncontroller. Create a ",(0,s.kt)("inlineCode",{parentName:"p"},"HubsController.cs")," file under the ",(0,s.kt)("inlineCode",{parentName:"p"},"Controllers")," subfolder with the following\ncontent:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Controllers/HubsController.cs"',title:'"Controllers/HubsController.cs"'},'using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\n\n[ApiController]\n[Route("api/[controller]")]\npublic class HubsController : ControllerBase\n{\n    private readonly ILogger<HubsController> _logger;\n    private readonly ForgeService _forgeService;\n\n    public HubsController(ILogger<HubsController> logger, ForgeService forgeService)\n    {\n        _logger = logger;\n        _forgeService = forgeService;\n    }\n\n    [HttpGet()]\n    public async Task<ActionResult<string>> ListHubs()\n    {\n        var tokens = await AuthController.PrepareTokens(Request, Response, _forgeService);\n        if (tokens == null)\n        {\n            return Unauthorized();\n        }\n        var hubs = await _forgeService.GetHubs(tokens);\n        return JsonConvert.SerializeObject(hubs);\n    }\n\n    [HttpGet("{hub}/projects")]\n    public async Task<ActionResult<string>> ListProjects(string hub)\n    {\n        var tokens = await AuthController.PrepareTokens(Request, Response, _forgeService);\n        if (tokens == null)\n        {\n            return Unauthorized();\n        }\n        var projects = await _forgeService.GetProjects(hub, tokens);\n        return JsonConvert.SerializeObject(projects);\n    }\n\n    [HttpGet("{hub}/projects/{project}/contents")]\n    public async Task<ActionResult<string>> ListItems(string hub, string project, [FromQuery] string? folder_id)\n    {\n        var tokens = await AuthController.PrepareTokens(Request, Response, _forgeService);\n        if (tokens == null)\n        {\n            return Unauthorized();\n        }\n        var contents = await _forgeService.GetContents(hub, project, folder_id, tokens);\n        return JsonConvert.SerializeObject(contents);\n    }\n\n    [HttpGet("{hub}/projects/{project}/contents/{item}/versions")]\n    public async Task<ActionResult<string>> ListVersions(string hub, string project, string item)\n    {\n        var tokens = await AuthController.PrepareTokens(Request, Response, _forgeService);\n        if (tokens == null)\n        {\n            return Unauthorized();\n        }\n        var versions = await _forgeService.GetVersions(hub, project, item, tokens);\n        return JsonConvert.SerializeObject(versions);\n    }\n}\n')),(0,s.kt)("p",null,"The controller handles several endpoints for browsing the content in 3rd party Forge\napplications such as BIM 360 Docs and ACC. We will make use of these endpoints when\nbuilding the UI part of the application."),(0,s.kt)("h2",{id:"try-it-out"},"Try it out"),(0,s.kt)("p",null,"And that's it for the server side. Time to try it out! Make sure you set all\nthe required environment variables, and run the application:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"export FORGE_CLIENT_ID=your-own-forge-client-id\nexport FORGE_CLIENT_SECRET=your-own-forge-client-secret\nexport FORGE_CALLBACK_URL=http://localhost:8080/api/auth/callback\ndotnet run\n")),(0,s.kt)("p",null,"You should now be able to explore the new endpoints tha will eventually be used from\nthe UI. For example, if you go to ",(0,s.kt)("a",{parentName:"p",href:"http://localhost:8080/api/hubs"},"http://localhost:8080/api/hubs"),",\nthe server should respond with a JSON list of all the hubs you have access to. Try copying the ID of\none of the hubs, and use it in another address: http://localhost:8080/api/hubs/your-hub-id/projects.\nIn this case the server application should respond with a JSON list of all projects\navailable under the specified hub."),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",alt:"Hubs Response",src:t(5824).Z,width:"1500",height:"929"})))}h.isMDXComponent=!0},5824:function(e,n,t){n.Z=t.p+"assets/images/hubs-response-331b6b1027c663dae5bf900e5ca9e1b8.png"}}]);