"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[697],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var g=r.createContext({}),l=function(e){var t=r.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(g.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,g=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),h=l(n),p=o,c=h["".concat(g,".").concat(p)]||h[p]||d[p]||a;return n?r.createElement(c,s(s({ref:t},u),{},{components:n})):r.createElement(c,s({ref:t},u))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=h;var i={};for(var g in t)hasOwnProperty.call(t,g)&&(i[g]=t[g]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},557:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return g},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={},g="Aggregates Panel",l={unversionedId:"tutorials/dashboard/panel",id:"tutorials/dashboard/panel",title:"Aggregates Panel",description:"In this step we will create another viewer extension, this time introducing custom UI elements",source:"@site/docs/tutorials/03-dashboard/02-panel.mdx",sourceDirName:"tutorials/03-dashboard",slug:"/tutorials/dashboard/panel",permalink:"/forge-samples-docs/docs/tutorials/dashboard/panel",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/master/docs/tutorials/03-dashboard/02-panel.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basic Extension",permalink:"/forge-samples-docs/docs/tutorials/dashboard/basic"},next:{title:"Histogram Charts",permalink:"/forge-samples-docs/docs/tutorials/dashboard/charts"}},u={},d=[{value:"Extension skeleton",id:"extension-skeleton",level:2},{value:"Toolbar",id:"toolbar",level:2},{value:"Docking panel",id:"docking-panel",level:2},{value:"Try it out",id:"try-it-out",level:2}],h={toc:d};function p(e){var t=e.components,i=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"aggregates-panel"},"Aggregates Panel"),(0,a.kt)("p",null,"In this step we will create another viewer extension, this time introducing custom UI elements\nas well. We will add a custom button to the viewer toolbar, and when the button is clicked,\nwe display a docking panel with data collected by the ",(0,a.kt)("inlineCode",{parentName:"p"},"SummaryExtension"),"."),(0,a.kt)("h2",{id:"extension-skeleton"},"Extension skeleton"),(0,a.kt)("p",null,"Just like with the previous extension, let's create a new file under the ",(0,a.kt)("inlineCode",{parentName:"p"},"extensions"),"\nsubfolder, call it ",(0,a.kt)("inlineCode",{parentName:"p"},"aggregates.js"),", and populate it with the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class AggregatesExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n    }\n\n    async load() {\n        console.log('AggregatesExtension loaded.');\n        return true;\n    }\n\n    async unload() {\n        console.log('AggregatesExtension unloaded.');\n        return true;\n    }\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension('AggregatesExtension', AggregatesExtension);\n")),(0,a.kt)("p",null,"Import the JavaScript file to our application, and pass the extension ID to the viewer\nconstructor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import './extensions/summary.js';\n// highlight-start\nimport './extensions/aggregates.js';\n// highlight-end\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n    extensions: [\n        'SummaryExtension',\n        // highlight-start\n        'AggregatesExtension',\n        // highlight-end\n    ]\n};\nconst viewer = new Autodesk.Viewing.GuiViewer3D(container, config);\n")),(0,a.kt)("h2",{id:"toolbar"},"Toolbar"),(0,a.kt)("p",null,"Next, let's update the ",(0,a.kt)("inlineCode",{parentName:"p"},"AggregatesExtension")," class so that it adds a new button to the viewer\ntoolbar when the extension gets loaded:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class AggregatesExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        // highlight-start\n        this._aggregatesButton = null;\n        // highlight-end\n    }\n\n    async load() {\n        console.log('AggregatesExtension loaded.');\n        return true;\n    }\n\n    async unload() {\n        // highlight-start\n        this._removeUI();\n        // highlight-end\n        console.log('AggregatesExtension unloaded.');\n        return true;\n    }\n\n    // highlight-start\n    onToolbarCreated() {\n        this._createUI();\n    }\n    // highlight-end\n\n    // highlight-start\n    _createUI() {\n        let group = this.viewer.toolbar.getControl('dashboard-toolbar-group');\n        if (!group) {\n            group = new Autodesk.Viewing.UI.ControlGroup('dashboard-toolbar-group');\n            this.viewer.toolbar.addControl(group);\n        }\n\n        this._aggregatesButton = new Autodesk.Viewing.UI.Button('aggregates-button');\n        this._aggregatesButton.onClick = () => {\n            // TODO\n        };\n        this._aggregatesButton.setToolTip('Show Property Aggregates');\n        group.addControl(this._aggregatesButton);\n\n        const style = document.createElement('style');\n        style.innerText = `\n            #aggregates-button {\n                background-image: url(https://img.icons8.com/small/32/brief.png);\n                background-size: 24px;\n                background-repeat: no-repeat;\n                background-position: center;\n            }\n        `;\n        document.head.appendChild(style);\n    }\n    // highlight-end\n\n    // highlight-start\n    _removeUI() {\n        if (this._aggregatesButton) {\n            this.viewer.toolbar.getControl('dashboard-toolbar-group').removeControl(this._aggregatesButton);\n            this._aggregatesButton = null;\n        }\n    }\n    // highlight-end\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension('AggregatesExtension', AggregatesExtension);\n")),(0,a.kt)("h2",{id:"docking-panel"},"Docking panel"),(0,a.kt)("p",null,"And finally, update the ",(0,a.kt)("inlineCode",{parentName:"p"},"AggregatesExtension")," extension so that when the user clicks on\nthe toolbar button, we display a custom viewer panel with data aggregated from properites\nof the currently loaded design. We also introduce a couple of event handlers to make sure\nthat the panel is updated whenever the user selects or isolates specific design elements:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class AggregatesExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        this._aggregatesButton = null;\n        // highlight-start\n        this._aggregatesPanel = null;\n        // For now, the names of properties we want to compute the aggregates for are hard-coded.\n        // In future these could be retrieved via the extension `options`, or perhaps set in the UI.\n        this._properties = ['Length', 'Area', 'Volume', 'Density', 'Mass', 'Price'];\n        this.update = this.update.bind(this);\n        // highlight-end\n    }\n\n    async load() {\n        // highlight-start\n        this.viewer.addEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this.update);\n        this.viewer.addEventListener(Autodesk.Viewing.ISOLATE_EVENT, this.update);\n        // highlight-end\n        console.log('AggregatesExtension loaded.');\n        return true;\n    }\n\n    async unload() {\n        this._removeUI();\n        // highlight-start\n        this.viewer.removeEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this.update);\n        this.viewer.removeEventListener(Autodesk.Viewing.ISOLATE_EVENT, this.update);\n        // highlight-end\n        console.log('AggregatesExtension unloaded.');\n        return true;\n    }\n\n    onToolbarCreated() {\n        this._createUI();\n    }\n\n    // highlight-start\n    update() {\n        if (this._aggregatesPanel) {\n            const selectedIds = this.viewer.getSelection();\n            const isolatedIds = this.viewer.getIsolatedNodes();\n            if (selectedIds.length > 0) { // If any nodes are selected, compute the aggregates for them\n                this._aggregatesPanel.update(this.viewer.model, selectedIds, this._properties);\n            } else if (isolatedIds.length > 0) { // Or, if any nodes are isolated, compute the aggregates for those\n                this._aggregatesPanel.update(this.viewer.model, isolatedIds, this._properties);\n            } else { // Otherwise compute the aggregates for all nodes\n                this._aggregatesPanel.update(this.viewer.model, [], this._properties);\n            }\n        }\n    }\n    // highlight-end\n\n    _createUI() {\n        let group = this.viewer.toolbar.getControl('dashboard-toolbar-group');\n        if (!group) {\n            group = new Autodesk.Viewing.UI.ControlGroup('dashboard-toolbar-group');\n            this.viewer.toolbar.addControl(group);\n        }\n\n        this._aggregatesButton = new Autodesk.Viewing.UI.Button('aggregates-button');\n        this._aggregatesButton.onClick = () => {\n            // highlight-start\n            if (!this._aggregatesPanel) {\n                this._aggregatesPanel = new AggregatesPanel(this.viewer, 'model-summary', 'Model Summary');\n                if (this.viewer.model) {\n                    this.update();\n                }\n            }\n            this._aggregatesPanel.setVisible(!this._aggregatesPanel.isVisible());\n            const { ACTIVE, INACTIVE } = Autodesk.Viewing.UI.Button.State;\n            this._aggregatesButton.setState(this._aggregatesPanel.isVisible() ? ACTIVE : INACTIVE);\n            // highlight-end\n        };\n        this._aggregatesButton.setToolTip('Show Model Summary');\n        group.addControl(this._aggregatesButton);\n\n        const style = document.createElement('style');\n        style.innerText = `\n            #aggregates-button {\n                background-image: url(https://img.icons8.com/small/32/brief.png);\n                background-size: 24px;\n                background-repeat: no-repeat;\n                background-position: center;\n            }\n        `;\n        document.head.appendChild(style);\n    }\n\n    _removeUI() {\n        if (this._aggregatesPanel) {\n            this._aggregatesPanel.setVisible(false);\n            this._aggregatesPanel = null;\n        }\n        if (this._aggregatesButton) {\n            this.viewer.toolbar.getControl('dashboard-toolbar-group').removeControl(this._aggregatesButton);\n            this._aggregatesButton = null;\n        }\n    }\n}\n\n// highlight-start\nclass AggregatesPanel extends Autodesk.Viewing.UI.PropertyPanel {\n    constructor(viewer, id, title) {\n        super(viewer.container, id, title);\n        this.viewer = viewer;\n    }\n\n    async update(model, dbids, propNames) {\n        const summaryExt = this.viewer.getExtension('SummaryExtension');\n        this.removeAllProperties();\n        for (const propName of propNames) {\n            const initialValue = { sum: 0, count: 0, min: Infinity, max: -Infinity, units: undefined };\n            const aggregateFunc = (aggregate, value, property) => {\n                if (aggregate.units && property.units && property.units !== aggregate.units) {\n                    console.warn('Aggregating values with different units is not supported');\n                }\n                return {\n                    sum: aggregate.sum + value,\n                    count: aggregate.count + 1,\n                    min: Math.min(aggregate.min, value),\n                    max: Math.max(aggregate.max, value),\n                    units: aggregate.units || property.units\n                };\n            };\n            const { sum, count, min, max, units } = await summaryExt.aggregatePropertyValues(model, dbids, propName, aggregateFunc, initialValue);\n            if (count > 0) {\n                const category = propName;\n                const suffix = units ? ' ' + units : '';\n                this.addProperty('Count', count, category);\n                this.addProperty('Sum', sum.toFixed(2) + suffix, category);\n                this.addProperty('Avg', (sum / count).toFixed(2) + suffix, category);\n                this.addProperty('Min', min.toFixed(2) + suffix, category);\n                this.addProperty('Max', max.toFixed(2) + suffix, category);\n            }\n        }\n    }\n}\n// highlight-end\n\nAutodesk.Viewing.theExtensionManager.registerExtension('AggregatesExtension', AggregatesExtension);\n")),(0,a.kt)("h2",{id:"try-it-out"},"Try it out"),(0,a.kt)("p",null,"This time we can test our new extension directly in the viewer. Try clicking the new toolbar\nbutton to open our aggregates panel. The panel shows various aggregates of properties\nwe specified in the extension constructor (in our case, ",(0,a.kt)("em",{parentName:"p"},"Length"),", ",(0,a.kt)("em",{parentName:"p"},"Area"),", ",(0,a.kt)("em",{parentName:"p"},"Volume"),", ",(0,a.kt)("em",{parentName:"p"},"Density"),",\n",(0,a.kt)("em",{parentName:"p"},"Mass"),", and ",(0,a.kt)("em",{parentName:"p"},"Price"),") for all objects. And when we isolate or select some of the design\nelements by hand, the aggregated values should reflect that as well."),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",alt:"Aggregates Result",src:n(2871).Z,width:"1500",height:"906"})))}p.isMDXComponent=!0},2871:function(e,t,n){t.Z=n.p+"assets/images/aggregates-result-a75be2d6532f002045389921e73369bf.png"}}]);