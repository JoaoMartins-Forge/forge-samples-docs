"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[732],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=a.createContext({}),h=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},p=function(t){var e=h(t.components);return a.createElement(l.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,l=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),d=h(n),u=r,g=d["".concat(l,".").concat(u)]||d[u]||c[u]||i;return n?a.createElement(g,o(o({ref:e},p),{},{components:n})):a.createElement(g,o({ref:e},p))}));function u(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:r,o[1]=s;for(var h=2;h<i;h++)o[h]=n[h];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9184:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return h},toc:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={},l="Histogram Charts",h={unversionedId:"tutorials/dashboard/charts",id:"tutorials/dashboard/charts",title:"Histogram Charts",description:"In this step we will create a viewer extension that will allow us to display aggregates",source:"@site/docs/tutorials/03-dashboard/03-charts.mdx",sourceDirName:"tutorials/03-dashboard",slug:"/tutorials/dashboard/charts",permalink:"/forge-samples-docs/docs/tutorials/dashboard/charts",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/master/docs/tutorials/03-dashboard/03-charts.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Aggregates Panel",permalink:"/forge-samples-docs/docs/tutorials/dashboard/panel"},next:{title:"Data Grid",permalink:"/forge-samples-docs/docs/tutorials/dashboard/grid"}},p={},c=[{value:"Extension skeleton",id:"extension-skeleton",level:2},{value:"Toolbar",id:"toolbar",level:2},{value:"Charts",id:"charts",level:2},{value:"Try it out",id:"try-it-out",level:2}],d={toc:c};function u(t){var e=t.components,s=(0,r.Z)(t,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,s,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"histogram-charts"},"Histogram Charts"),(0,i.kt)("p",null,"In this step we will create a viewer extension that will allow us to display aggregates\nfrom ",(0,i.kt)("inlineCode",{parentName:"p"},"SummaryExtension")," as histogram chars using the open source ",(0,i.kt)("a",{parentName:"p",href:"https://www.chartjs.org"},"Chart.js"),"\nlibrary."),(0,i.kt)("h2",{id:"extension-skeleton"},"Extension skeleton"),(0,i.kt)("p",null,"Just like in previous steps, let's create a new file under the ",(0,i.kt)("inlineCode",{parentName:"p"},"extensions")," subfolder,\ncall it ",(0,i.kt)("inlineCode",{parentName:"p"},"histogram.js"),", and populate it with the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/// import * as Chart from \"@types/chart.js\";\n\nclass HistogramExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n    }\n\n    async load() {\n        await Autodesk.Viewing.Private.theResourceLoader.loadScript('https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js', 'Chart');\n        console.log('HistogramExtension loaded.');\n        return true;\n    }\n\n    async unload() {\n        console.log('HistogramExtension unloaded.');\n        return true;\n    }\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension('HistogramExtension', HistogramExtension);\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},'/// import * as Chart from "@types/chart.js";')," line at the beginning of the JavaScript file\nmight be useful if you are using Node.js and Visual Studio Code. In that case, you can install\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@types/chart.js"},"@types/chart.js")," NPM package, and Visual Studio\nCode will provide additional intellisense for the Chart.js library as well."))),(0,i.kt)("p",null,"As you can see in the ",(0,i.kt)("inlineCode",{parentName:"p"},"load")," method, we are using a helper method from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Autodesk.Viewing.Private"),"\nnamespace to load the Chart.js library, so that we don't have to include it in the HTML by hand.\nThe library will only be loaded if there is no ",(0,i.kt)("inlineCode",{parentName:"p"},"Chart")," symbol in the global scope."),(0,i.kt)("p",null,"Now let's import the JavaScript file to our application, and pass the extension ID to the viewer\nconstructor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './extensions/summary.js';\nimport './extensions/aggregates.js';\n// highlight-start\nimport './extensions/histogram.js';\n// highlight-end\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n    extensions: [\n        'SummaryExtension',\n        'AggregatesExtension',\n        // highlight-start\n        'HistogramExtension',\n        // highlight-end\n    ]\n};\nconst viewer = new Autodesk.Viewing.GuiViewer3D(container, config);\n")),(0,i.kt)("h2",{id:"toolbar"},"Toolbar"),(0,i.kt)("p",null,"Next, let's update the ",(0,i.kt)("inlineCode",{parentName:"p"},"HistogramExtension")," class so that it adds two new buttons to the viewer\ntoolbar, one for showing a bar chart, and another one for showing a pie chart:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/// import * as Chart from \"@types/chart.js\";\n\nclass HistogramExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        // highlight-start\n        this._barChartButton = null;\n        this._pieChartButton = null;\n        // highlight-end\n    }\n\n    async load() {\n        await Autodesk.Viewing.Private.theResourceLoader.loadScript('https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js', 'Chart'); // kinda hacky...\n        console.log('HistogramExtension loaded.');\n        return true;\n    }\n\n    async unload() {\n        // highlight-start\n        this._removeUI();\n        // highlight-end\n        console.log('HistogramExtension unloaded.');\n        return true;\n    }\n\n    // highlight-start\n    onToolbarCreated() {\n        this._createUI();\n    }\n    // highlight-end\n\n    // highlight-start\n    _createUI() {\n        let group = this.viewer.toolbar.getControl('dashboard-toolbar-group');\n        if (!group) {\n            group = new Autodesk.Viewing.UI.ControlGroup('dashboard-toolbar-group');\n            this.viewer.toolbar.addControl(group);\n        }\n        this._barChartButton = new Autodesk.Viewing.UI.Button('histogram-barchart-button');\n        this._barChartButton.onClick = () => {\n            // TODO\n        };\n        this._barChartButton.setToolTip('Show Property Histogram (Bar Chart)');\n        group.addControl(this._barChartButton);\n\n        this._pieChartButton = new Autodesk.Viewing.UI.Button('histogram-piechart-button');\n        this._pieChartButton.onClick = () => {\n            // TODO\n        };\n        this._pieChartButton.setToolTip('Show Property Histogram (Pie Chart)');\n        group.addControl(this._pieChartButton);\n\n        const style = document.createElement('style');\n        style.innerText = `\n            #histogram-barchart-button {\n                background-image: url(https://img.icons8.com/small/32/bar-chart.png);\n                background-size: 24px;\n                background-repeat: no-repeat;\n                background-position: center;\n            }\n            #histogram-piechart-button {\n                background-image: url(https://img.icons8.com/small/32/pie-chart.png);\n                background-size: 24px;\n                background-repeat: no-repeat;\n                background-position: center;\n            }\n        `;\n        document.head.appendChild(style);\n    }\n    // highlight-end\n\n    // highlight-start\n    _removeUI() {\n        if (this._barChartButton) {\n            this.viewer.toolbar.getControl('dashboard-toolbar-group').removeControl(this._barChartButton);\n            this._barChartButton = null;\n        }\n        if (this._pieChartButton) {\n            this.viewer.toolbar.getControl('dashboard-toolbar-group').removeControl(this._pieChartButton);\n            this._pieChartButton = null;\n        }\n    }\n    // highlight-start\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension('HistogramExtension', HistogramExtension);\n")),(0,i.kt)("h2",{id:"charts"},"Charts"),(0,i.kt)("p",null,"Finally, we create another custom docking panel that will host the actual chart graphics:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/// import * as Chart from \"@types/chart.js\";\n\nclass HistogramExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        this._barChartButton = null;\n        this._pieChartButton = null;\n        // highlight-start\n        this._barChartPanel = null;\n        this._pieChartPanel = null;\n        // highlight-end\n    }\n\n    async load() {\n        await Autodesk.Viewing.Private.theResourceLoader.loadScript('https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js', 'Chart'); // kinda hacky...\n        // highlight-start\n        Chart.defaults.plugins.legend.display = false;\n        this.viewer.addEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, () => {\n            if (this._barChartPanel) {\n                this._barChartPanel.setModel(this.viewer.model);\n            }\n            if (this._pieChartPanel) {\n                this._pieChartPanel.setModel(this.viewer.model);\n            }\n        });\n        // highlight-end\n        console.log('HistogramExtension loaded.');\n        return true;\n    }\n\n    async unload() {\n        this._removeUI();\n        console.log('HistogramExtension unloaded.');\n        return true;\n    }\n\n    onToolbarCreated() {\n        this._createUI();\n    }\n\n    _createUI() {\n        let group = this.viewer.toolbar.getControl('dashboard-toolbar-group');\n        if (!group) {\n            group = new Autodesk.Viewing.UI.ControlGroup('dashboard-toolbar-group');\n            this.viewer.toolbar.addControl(group);\n        }\n        this._barChartButton = new Autodesk.Viewing.UI.Button('histogram-barchart-button');\n        this._barChartButton.onClick = () => {\n            // highlight-start\n            if (!this._barChartPanel) {\n                this._barChartPanel = new ChartPanel(this.viewer, 'histogram-barchart', 'Property Histogram', { x: 10, y: 10, chartType: 'bar' });\n                if (this.viewer.model) {\n                    this._barChartPanel.setModel(this.viewer.model);\n                }\n            }\n            this._barChartPanel.setVisible(!this._barChartPanel.isVisible());\n            const { ACTIVE, INACTIVE } = Autodesk.Viewing.UI.Button.State;\n            this._barChartButton.setState(this._barChartPanel.isVisible() ? ACTIVE : INACTIVE);\n            // highlight-end\n        };\n        this._barChartButton.setToolTip('Show Property Histogram (Bar Chart)');\n        group.addControl(this._barChartButton);\n\n        this._pieChartButton = new Autodesk.Viewing.UI.Button('histogram-piechart-button');\n        this._pieChartButton.onClick = () => {\n            // highlight-start\n            if (!this._pieChartPanel) {\n                this._pieChartPanel = new ChartPanel(this.viewer, 'histogram-piechart', 'Property Histogram', { x: 10, y: 420, chartType: 'doughnut' });\n                if (this.viewer.model) {\n                    this._pieChartPanel.setModel(this.viewer.model);\n                }\n            }\n            this._pieChartPanel.setVisible(!this._pieChartPanel.isVisible());\n            this._pieChartButton.setState(this._pieChartPanel.isVisible() ? Autodesk.Viewing.UI.Button.State.ACTIVE : Autodesk.Viewing.UI.Button.State.INACTIVE);\n            // highlight-end\n        };\n        this._pieChartButton.setToolTip('Show Property Histogram (Pie Chart)');\n        group.addControl(this._pieChartButton);\n\n        const style = document.createElement('style');\n        style.innerText = `\n            #histogram-barchart-button {\n                background-image: url(https://img.icons8.com/small/32/bar-chart.png);\n                background-size: 24px;\n                background-repeat: no-repeat;\n                background-position: center;\n            }\n            #histogram-piechart-button {\n                background-image: url(https://img.icons8.com/small/32/pie-chart.png);\n                background-size: 24px;\n                background-repeat: no-repeat;\n                background-position: center;\n            }\n        `;\n        document.head.appendChild(style);\n    }\n\n    _removeUI() {\n        // highlight-start\n        if (this._barChartPanel) {\n            this._barChartPanel.setVisible(false);\n            this._barChartPanel.uninitialize();\n            this._barChartPanel = null;\n        }\n        if (this._pieChartPanel) {\n            this._pieChartPanel.setVisible(false);\n            this._pieChartPanel.uninitialize();\n            this._pieChartPanel = null;\n        }\n        // highlight-end\n        if (this._barChartButton) {\n            this.viewer.toolbar.getControl('dashboard-toolbar-group').removeControl(this._barChartButton);\n            this._barChartButton = null;\n        }\n        if (this._pieChartButton) {\n            this.viewer.toolbar.getControl('dashboard-toolbar-group').removeControl(this._pieChartButton);\n            this._pieChartButton = null;\n        }\n    }\n}\n\n// highlight-start\nclass ChartPanel extends Autodesk.Viewing.UI.DockingPanel {\n    constructor(viewer, id, title, options) {\n        super(viewer.container, id, title, options);\n        this.viewer = viewer;\n        this.container.style.left = (options.x || 0) + 'px';\n        this.container.style.top = (options.y || 0) + 'px';\n        this.container.style.width = (options.width || 500) + 'px';\n        this.container.style.height = (options.height || 400) + 'px';\n        this.container.style.resize = 'none';\n        this.chartType = options.chartType || 'bar'; // See https://www.chartjs.org/docs/latest for all the supported types of charts\n        this.chart = this.createChart();\n    }\n\n    initialize() {\n        this.title = this.createTitleBar(this.titleLabel || this.container.id);\n        this.initializeMoveHandlers(this.title);\n        this.container.appendChild(this.title);\n        this.content = document.createElement('div');\n        this.content.style.height = '350px';\n        this.content.style.backgroundColor = 'white';\n        this.content.innerHTML = `\n            <div class=\"props-container\" style=\"position: relative; height: 25px; padding: 0.5em;\">\n                <select class=\"props\"></select>\n            </div>\n            <div class=\"chart-container\" style=\"position: relative; height: 325px; padding: 0.5em;\">\n                <canvas class=\"chart\"></canvas>\n            </div>\n        `;\n        this.select = this.content.querySelector('select.props');\n        this.canvas = this.content.querySelector('canvas.chart');\n        this.container.appendChild(this.content);\n    }\n\n    createChart() {\n        return new Chart(this.canvas.getContext('2d'), {\n            type: this.chartType,\n            data: {\n                labels: [],\n                datasets: [{ data: [], backgroundColor: [], borderColor: [], borderWidth: 1 }],\n            },\n            options: { maintainAspectRatio: false }\n        });\n    }\n\n    async setModel(model) {\n        const summaryExt = this.viewer.getExtension('SummaryExtension');\n        const propertyNames = await summaryExt.findPropertyNames(model);\n        this.select.innerHTML = propertyNames.map(prop => `<option value=\"${prop}\">${prop}</option>`).join('\\n');\n        this.select.onchange = () => this.updateChart(model, this.select.value);\n        this.updateChart(model, this.select.value);\n    }\n\n    async updateChart(model, propName) {\n        const summaryExt = this.viewer.getExtension('SummaryExtension');\n        const histogram = await summaryExt.computePropertyHistogram(model, propName);\n        const propertyValues = Array.from(histogram.keys());\n        this.chart.data.labels = propertyValues;\n        const dataset = this.chart.data.datasets[0];\n        dataset.label = propName;\n        dataset.data = propertyValues.map(val => histogram.get(val).length);\n        if (dataset.data.length > 0) {\n            const hslaColors = dataset.data.map((val, index) => `hsla(${Math.round(index * (360 / dataset.data.length))}, 100%, 50%, 0.2)`);\n            dataset.backgroundColor = dataset.borderColor = hslaColors;\n        }\n        this.chart.update();\n        this.chart.config.options.onClick = (ev, items) => {\n            if (items.length === 1) {\n                const index = items[0].index;\n                const dbids = histogram.get(propertyValues[index]);\n                this.viewer.isolate(dbids);\n                this.viewer.fitToView(dbids);\n            }\n        };\n    }\n}\n// highlight-end\n\nAutodesk.Viewing.theExtensionManager.registerExtension('HistogramExtension', HistogramExtension);\n")),(0,i.kt)("h2",{id:"try-it-out"},"Try it out"),(0,i.kt)("p",null,"Alright, time to test our charts extension in the viewer. Click on either of the new toolbar\nbuttons. A new panel should show up with either a bar chart or a pie chart showing the histogram\nof different values appearing for a specific property (which you can select in the dropdown).\nAnd clicking on any bar or pie segment will then isolate all the corresponding design elements\nin the viewer."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Histogram Result",src:n(6955).Z,width:"1500",height:"994"})))}u.isMDXComponent=!0},6955:function(t,e,n){e.Z=n.p+"assets/images/histogram-result-82be75d0eb0bd4ab26e262e2b8fd4ac6.png"}}]);