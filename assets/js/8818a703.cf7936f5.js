"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[82],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4828:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),a=["components"],i={sidebar_position:1},l="Basic Server",p={unversionedId:"tutorials/hubs-browser/nodejs-vscode/server",id:"tutorials/hubs-browser/nodejs-vscode/server",title:"Basic Server",description:"In this step we're going to create a new Node.js project, install all the required dependencies,",source:"@site/docs/tutorials/hubs-browser/nodejs-vscode/01-server.md",sourceDirName:"tutorials/hubs-browser/nodejs-vscode",slug:"/tutorials/hubs-browser/nodejs-vscode/server",permalink:"/forge-samples-docs/docs/tutorials/hubs-browser/nodejs-vscode/server",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/master/docs/tutorials/hubs-browser/nodejs-vscode/01-server.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/forge-samples-docs/docs/tutorials/hubs-browser/"},next:{title:"Authentication",permalink:"/forge-samples-docs/docs/tutorials/hubs-browser/nodejs-vscode/auth"}},c={},u=[{value:"Project &amp; dependencies",id:"project--dependencies",level:2},{value:"Application config",id:"application-config",level:2},{value:"Create a basic server",id:"create-a-basic-server",level:2},{value:"Try it out",id:"try-it-out",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"basic-server"},"Basic Server"),(0,s.kt)("p",null,"In this step we're going to create a new Node.js project, install all the required dependencies,\nand setup a basic ",(0,s.kt)("a",{parentName:"p",href:"https://expressjs.com"},"Express.js")," server."),(0,s.kt)("h2",{id:"project--dependencies"},"Project & dependencies"),(0,s.kt)("p",null,"Create a new folder for your project, navigate to it in the command line,\nand initialize a new Node.js project:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\n")),(0,s.kt)("p",null,"Next, install all the Node.js dependencies we're going to use. In this case it will be\nthe ",(0,s.kt)("a",{parentName:"p",href:"https://expressjs.com"},"Express.js")," framework, an Express.js ",(0,s.kt)("a",{parentName:"p",href:"https://expressjs.com/en/guide/using-middleware.html"},"middleware"),"\nfor handling cookie-based sessions, and finally the ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/forge-apis"},"Forge SDK"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save express cookie-session forge-apis\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},'"dependencies"')," in your ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json")," file should now look something like this\n(potentially with slightly different version numbers):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'// ...\n"dependencies": {\n    "cookie-session": "^1.4.0",\n    "express": "^4.17.1",\n    "forge-apis": "^0.8.6"\n},\n// ...\n')),(0,s.kt)("p",null,"Finally, let's create a couple more subfolders in your project folder that we're going to need later:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"wwwroot")," - this is where we're going to put all the client side assets (HTML, CSS, JavaScript, images, etc.)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"routes")," - this is where we're going to implement all the server endpoints"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"services")," - here we're going to keep all the server-side logic that can be shared by different endpoints")),(0,s.kt)("h2",{id:"application-config"},"Application config"),(0,s.kt)("p",null,"Our Node.js application will need a couple of configuration parameters to run properly, for example,\nthe credentials of our Forge app for communicating with Autodesk Forge services, or the callback URL\nwhere our users will be redirected to after logging in succesfully. We will pass these parameters\nto the server app using environment variables."),(0,s.kt)("p",null,"Create a ",(0,s.kt)("inlineCode",{parentName:"p"},"config.js")," file in the root of your project folder, and add the following code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="config.js"',title:'"config.js"'},"let { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, FORGE_CALLBACK_URL, SERVER_SESSION_SECRET, PORT } = process.env;\nif (!FORGE_CLIENT_ID || !FORGE_CLIENT_SECRET || !FORGE_CALLBACK_URL || !SERVER_SESSION_SECRET) {\n    console.warn('Missing some of the environment variables.');\n    process.exit(1);\n}\nconst INTERNAL_TOKEN_SCOPES = ['data:read'];\nconst PUBLIC_TOKEN_SCOPES = ['viewables:read'];\nPORT = PORT || 8080;\n\nmodule.exports = {\n    FORGE_CLIENT_ID,\n    FORGE_CLIENT_SECRET,\n    FORGE_CALLBACK_URL,\n    SERVER_SESSION_SECRET,\n    INTERNAL_TOKEN_SCOPES,\n    PUBLIC_TOKEN_SCOPES,\n    PORT\n};\n")),(0,s.kt)("p",null,"We simply read the environment variables from ",(0,s.kt)("inlineCode",{parentName:"p"},"process.env"),", and exit the application\nimmediately if any of the required properties are missing."),(0,s.kt)("h2",{id:"create-a-basic-server"},"Create a basic server"),(0,s.kt)("p",null,"Create a ",(0,s.kt)("inlineCode",{parentName:"p"},"server.js")," file in the root of your project folder with the following code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},"const express = require('express');\nconst session = require('cookie-session')\nconst { PORT, SERVER_SESSION_SECRET } = require('./config.js');\n\nlet app = express();\napp.use(express.static('wwwroot'));\napp.use(session({ secret: SERVER_SESSION_SECRET, maxAge: 24 * 60 * 60 * 1000 }));\napp.listen(PORT, () => console.log(`Server listening on port ${PORT}...`));\n")),(0,s.kt)("p",null,"For now the server isn't doing much, just serving client side assets from the ",(0,s.kt)("inlineCode",{parentName:"p"},"wwwroot")," subfolder,\nand accessing session data stored in cookies. The cookies will be encrypted using a secret phrase\nthat we will need to pass to the application via the environment variable ",(0,s.kt)("inlineCode",{parentName:"p"},"SERVER_SESSION_SECRET"),"."),(0,s.kt)("p",null,"Next, let's add a ",(0,s.kt)("inlineCode",{parentName:"p"},'"start": "node server.js"')," script to the ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json")," file so that we can\neasily run our application later:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'// ...\n"scripts": {\n    "start": "node server.js"\n}\n// ...\n')),(0,s.kt)("h2",{id:"try-it-out"},"Try it out"),(0,s.kt)("p",null,"Try running the application from the command line:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"export SERVER_SESSION_SECRET=some-secret-phrase\nnpm start\n")),(0,s.kt)("p",null,"Then open your browser and navigate to http://localhost:8080. The server should respond\nwith ",(0,s.kt)("inlineCode",{parentName:"p"},"Cannot GET /")," because we haven't added any logic to it just yet. That's going to be\nthe goal of the next step."))}m.isMDXComponent=!0}}]);