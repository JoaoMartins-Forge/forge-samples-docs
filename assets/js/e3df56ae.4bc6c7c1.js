"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[570],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return p}});var i=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,i,a=function(t,e){if(null==t)return{};var n,i,a={},r=Object.keys(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=i.createContext({}),d=function(t){var e=i.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=d(t.components);return i.createElement(l.Provider,{value:e},t.children)},h={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},c=i.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,l=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),c=d(n),p=a,g=c["".concat(l,".").concat(p)]||c[p]||h[p]||r;return n?i.createElement(g,o(o({ref:e},u),{},{components:n})):i.createElement(g,o({ref:e},u))}));function p(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,o=new Array(r);o[0]=c;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:a,o[1]=s;for(var d=2;d<r;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5331:function(t,e,n){n.r(e),n.d(e,{assets:function(){return u},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return h}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],s={},l="Data Grid",d={unversionedId:"tutorials/dashboard/grid",id:"tutorials/dashboard/grid",title:"Data Grid",description:"In this final step we will build a viewer extension that will provide a datagrid view",source:"@site/docs/tutorials/03-dashboard/04-grid.mdx",sourceDirName:"tutorials/03-dashboard",slug:"/tutorials/dashboard/grid",permalink:"/forge-samples-docs/docs/tutorials/dashboard/grid",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/master/docs/tutorials/03-dashboard/04-grid.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Histogram Charts",permalink:"/forge-samples-docs/docs/tutorials/dashboard/charts"}},u={},h=[{value:"Extension skeleton",id:"extension-skeleton",level:2},{value:"Toolbar",id:"toolbar",level:2},{value:"Data grid",id:"data-grid-1",level:2},{value:"Try it out",id:"try-it-out",level:2}],c={toc:h};function p(t){var e=t.components,s=(0,a.Z)(t,o);return(0,r.kt)("wrapper",(0,i.Z)({},c,s,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-grid"},"Data Grid"),(0,r.kt)("p",null,"In this final step we will build a viewer extension that will provide a datagrid view\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"SummaryExtension")," data using the open source ",(0,r.kt)("a",{parentName:"p",href:"http://tabulator.info"},"Tabulator")," library."),(0,r.kt)("h2",{id:"extension-skeleton"},"Extension skeleton"),(0,r.kt)("p",null,"As usual, let's create a new file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"extensions")," subfolder, call it ",(0,r.kt)("inlineCode",{parentName:"p"},"datagrid.js"),",\nand populate it with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class DataGridExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n    }\n\n    async load() {\n        const loadCSS = (href) => new Promise(function (resolve, reject) {\n            const el = document.createElement('link');\n            el.rel = 'stylesheet';\n            el.href = href;\n            el.onload = resolve;\n            el.onerror = reject;\n            document.head.appendChild(el);\n        });\n        await Promise.all([\n            Autodesk.Viewing.Private.theResourceLoader.loadScript('https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js', 'moment'),\n            Autodesk.Viewing.Private.theResourceLoader.loadScript('https://unpkg.com/tabulator-tables@4.9.3/dist/js/tabulator.min.js', 'Tabulator'),\n            loadCSS('https://unpkg.com/tabulator-tables@4.9.3/dist/css/tabulator.min.css')\n        ]);\n        console.log('DataGridExtension loaded.');\n        return true;\n    }\n\n    async unload() {\n        console.log('DataGridExtension unloaded.');\n        return true;\n    }\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension('DataGridExtension', DataGridExtension);\n")),(0,r.kt)("p",null,"This time we're loading multiple dependencies that are required by the Tabulator library."),(0,r.kt)("p",null,"Now let's import the JavaScript file to our application, and pass the extension ID to the viewer\nconstructor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import './extensions/summary.js';\nimport './extensions/aggregates.js';\nimport './extensions/histogram.js';\n// highlight-start\nimport './extensions/datagrid.js';\n// highlight-end\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n    extensions: [\n        'SummaryExtension',\n        'AggregatesExtension',\n        'HistogramExtension',\n        // highlight-start\n        'DataGridExtension',\n        // highlight-end\n    ]\n};\nconst viewer = new Autodesk.Viewing.GuiViewer3D(container, config);\n")),(0,r.kt)("h2",{id:"toolbar"},"Toolbar"),(0,r.kt)("p",null,"Next, let's update the ",(0,r.kt)("inlineCode",{parentName:"p"},"DataGridExtension")," class so that it adds a new button to the viewer\ntoolbar when the extension gets loaded:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Viewer extension providing a datagrid UI via a 3rd party library (http://tabulator.info)\nclass DataGridExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        // highlight-start\n        this._dataGridButton = null;\n        // highlight-end\n    }\n\n    async load() {\n        const loadCSS = (href) => new Promise(function (resolve, reject) {\n            const el = document.createElement('link');\n            el.rel = 'stylesheet';\n            el.href = href;\n            el.onload = resolve;\n            el.onerror = reject;\n            document.head.appendChild(el);\n        });\n        await Promise.all([\n            Autodesk.Viewing.Private.theResourceLoader.loadScript('https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js', 'moment'), // kinda hacky...\n            Autodesk.Viewing.Private.theResourceLoader.loadScript('https://unpkg.com/tabulator-tables@4.9.3/dist/js/tabulator.min.js', 'Tabulator'), // kinda hacky...\n            loadCSS('https://unpkg.com/tabulator-tables@4.9.3/dist/css/tabulator.min.css') // kinda hacky...\n        ]);\n        console.log('DataGridExtension loaded.');\n        return true;\n    }\n\n    async unload() {\n        // highlight-start\n        this._removeUI();\n        // highlight-end\n        console.log('DataGridExtension unloaded.');\n        return true;\n    }\n\n    // highlight-start\n    onToolbarCreated() {\n        this._createUI();\n    }\n    // highlight-end\n\n    // highlight-start\n    _createUI() {\n        let group = this.viewer.toolbar.getControl('dashboard-toolbar-group');\n        if (!group) {\n            group = new Autodesk.Viewing.UI.ControlGroup('dashboard-toolbar-group');\n            this.viewer.toolbar.addControl(group);\n        }\n        this._dataGridButton = new Autodesk.Viewing.UI.Button('datagrid-button');\n        this._dataGridButton.onClick = () => {\n        };\n        this._dataGridButton.setToolTip('Show Data Grid');\n        group.addControl(this._dataGridButton);\n    }\n    // highlight-end\n\n    // highlight-start\n    _removeUI() {\n        if (this._dataGridButton) {\n            this.viewer.toolbar.getControl('dashboard-toolbar-group').removeControl(this._dataGridButton);\n            this._dataGridButton = null;\n        }\n    }\n    // highlight-end\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension('DataGridExtension', DataGridExtension);\n")),(0,r.kt)("h2",{id:"data-grid-1"},"Data grid"),(0,r.kt)("p",null,"Finally, we create a custom docking panel that will host the actual Tabulator grid."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class DataGridExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        this._dataGridButton = null;\n        // highlight-start\n        this._dataGridPanel = null;\n        // highlight-end\n    }\n\n    async load() {\n        const loadCSS = (href) => new Promise(function (resolve, reject) {\n            const el = document.createElement('link');\n            el.rel = 'stylesheet';\n            el.href = href;\n            el.onload = resolve;\n            el.onerror = reject;\n            document.head.appendChild(el);\n        });\n        await Promise.all([\n            Autodesk.Viewing.Private.theResourceLoader.loadScript('https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js', 'moment'), // kinda hacky...\n            Autodesk.Viewing.Private.theResourceLoader.loadScript('https://unpkg.com/tabulator-tables@4.9.3/dist/js/tabulator.min.js', 'Tabulator'), // kinda hacky...\n            loadCSS('https://unpkg.com/tabulator-tables@4.9.3/dist/css/tabulator.min.css') // kinda hacky...\n        ]);\n        // highlight-start\n        this.viewer.addEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, () => {\n            if (this._dataGridPanel) {\n                this._dataGridPanel.setModel(this.viewer.model);\n            }\n        });\n        // highlight-end\n        console.log('DataGridExtension loaded.');\n        return true;\n    }\n\n    async unload() {\n        this._removeUI();\n        console.log('DataGridExtension unloaded.');\n        return true;\n    }\n\n    onToolbarCreated() {\n        this._createUI();\n    }\n\n    _createUI() {\n        let group = this.viewer.toolbar.getControl('dashboard-toolbar-group');\n        if (!group) {\n            group = new Autodesk.Viewing.UI.ControlGroup('dashboard-toolbar-group');\n            this.viewer.toolbar.addControl(group);\n        }\n        this._dataGridButton = new Autodesk.Viewing.UI.Button('datagrid-button');\n        this._dataGridButton.onClick = () => {\n            // highlight-start\n            if (!this._dataGridPanel) {\n                this._dataGridPanel = new DataGridPanel(this.viewer, 'datagrid', 'Data Grid', { x: 10, y: 10 });\n                if (this.viewer.model) {\n                    this._dataGridPanel.setModel(this.viewer.model);\n                }\n            }\n            this._dataGridPanel.setVisible(!this._dataGridPanel.isVisible());\n            const { ACTIVE, INACTIVE } = Autodesk.Viewing.UI.Button.State;\n            this._dataGridButton.setState(this._dataGridPanel.isVisible() ? ACTIVE : INACTIVE);\n            // highlight-end\n        };\n        this._dataGridButton.setToolTip('Show Data Grid');\n        group.addControl(this._dataGridButton);\n    }\n\n    _removeUI() {\n        if (this._dataGridPanel) {\n            this._dataGridPanel.setVisible(false);\n            this._dataGridPanel.uninitialize();\n            this._dataGridPanel = null;\n        }\n        if (this._dataGridButton) {\n            this.viewer.toolbar.getControl('dashboard-toolbar-group').removeControl(this._dataGridButton);\n            this._dataGridButton = null;\n        }\n    }\n}\n\n// highlight-start\nclass DataGridPanel extends Autodesk.Viewing.UI.DockingPanel {\n    constructor(viewer, id, title, options) {\n        super(viewer.container, id, title, options);\n        this.viewer = viewer;\n        this.container.style.left = (options.x || 0) + 'px';\n        this.container.style.top = (options.y || 0) + 'px';\n        this.container.style.width = (options.width || 500) + 'px';\n        this.container.style.height = (options.height || 400) + 'px';\n        this.container.style.resize = 'none';\n    }\n\n    initialize() {\n        this.title = this.createTitleBar(this.titleLabel || this.container.id);\n        this.initializeMoveHandlers(this.title);\n        this.container.appendChild(this.title);\n        this.content = document.createElement('div');\n        this.content.style.height = '350px';\n        this.content.style.backgroundColor = 'white';\n        this.content.innerHTML = `<div class=\"datagrid-container\" style=\"position: relative; height: 350px;\"></div>`;\n        this.container.appendChild(this.content);\n        this.table = new Tabulator('.datagrid-container', {\n            height: '100%',\n            layout: 'fitColumns',\n            groupBy: 'material',\n            columns: [\n                { title: 'ID', field: 'dbid' },\n                { title: 'Name', field: 'name', width: 150 },\n                { title: 'Volume', field: 'volume', hozAlign: 'left', formatter: 'progress' },\n                { title: 'Material', field: 'material' }\n            ],\n            rowClick: (e, row) => {\n                const { dbid } = row.getData();\n                this.viewer.isolate([dbid]);\n                this.viewer.fitToView([dbid]);\n            }\n        });\n    }\n\n    async setModel(model) {\n        this.updateTable(model);\n    }\n\n    async updateTable(model) {\n        const getProps = (model, dbids, props) => new Promise(function (resolve, reject) {\n            model.getBulkProperties(dbids, { propFilter: props }, resolve, reject);\n        });\n        const summaryExt = this.viewer.getExtension('SummaryExtension');\n        const dbids = await summaryExt.findLeafNodes(model);\n        const results = await getProps(model, dbids, ['Name', 'Volume', 'Structural Material', 'name']);\n        this.table.replaceData(results.map(result => {\n            return {\n                dbid: result.dbId,\n                name: result.name,\n                volume: result.properties.find(item => item.displayName === 'Volume')?.displayValue,\n                material: result.properties.find(item => item.displayName === 'Structural Material')?.displayValue\n            };\n        }));\n    }\n}\n// highlight-end\n\nAutodesk.Viewing.theExtensionManager.registerExtension('DataGridExtension', DataGridExtension);\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To keep things simple, the ",(0,r.kt)("inlineCode",{parentName:"p"},"DataGridPanel")," class is currently hard-coding the grid columns\nto only show a couple of specific properties of our design metadata (specifically the object ID,\nobject name, and ",(0,r.kt)("inlineCode",{parentName:"p"},"Volume")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Structural Material")," properties). Depending on the type of design\nyou will be loading into your application, you may want to change these."))),(0,r.kt)("h2",{id:"try-it-out"},"Try it out"),(0,r.kt)("p",null,"Click on the new toolbar button to bring up the datagrid panel. The grid should list selected\nproperties (in our case, object ID, object name, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"Volume")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Structural Material")," properties)\nof all design elements, and clicking on any row in the grid should isolate the specific design\nelement."),(0,r.kt)("p",null,(0,r.kt)("img",{loading:"lazy",alt:"Grid Result",src:n(2667).Z,width:"1500",height:"983"})))}p.isMDXComponent=!0},2667:function(t,e,n){e.Z=n.p+"assets/images/grid-result-6a11819a4da5004ae332eaea900d7338.png"}}]);