"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[377],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?o.createElement(g,i(i({ref:n},p),{},{components:t})):o.createElement(g,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,n,t){t.d(n,{Z:function(){return r}});var o=t(7294);function r(e){var n=e.children,t=e.hidden,r=e.className;return o.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return p}});var o=t(7462),r=t(7294),a=t(2389),i=t(9366),s=t(6010),l="tabItem_LplD";function c(e){var n,t,a,c=e.lazy,p=e.block,u=e.defaultValue,d=e.values,m=e.groupId,g=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),k=(0,i.lx)(v,(function(e,n){return e.value===n.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===u?u:null!=(n=null!=u?u:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(a=h[0])?void 0:a.props.value;if(null!==f&&!v.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=(0,i.UB)(),b=T.tabGroupChoices,C=T.setTabGroupChoices,w=(0,r.useState)(f),y=w[0],N=w[1],S=[],E=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var x=b[m];null!=x&&x!==y&&v.some((function(e){return e.value===x}))&&N(x)}var _=function(e){var n=e.currentTarget,t=S.indexOf(n),o=v[t].value;o!==y&&(E(n),N(o),null!=m&&C(m,o))},I=function(e){var n,t=null;switch(e.key){case"ArrowRight":var o=S.indexOf(e.currentTarget)+1;t=S[o]||S[0];break;case"ArrowLeft":var r=S.indexOf(e.currentTarget)-1;t=S[r]||S[S.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":p},g)},v.map((function(e){var n=e.value,t=e.label,a=e.attributes;return r.createElement("li",(0,o.Z)({role:"tab",tabIndex:y===n?0:-1,"aria-selected":y===n,key:n,ref:function(e){return S.push(e)},onKeyDown:I,onFocus:_,onClick:_},a,{className:(0,s.Z)("tabs__item",l,null==a?void 0:a.className,{"tabs__item--active":y===n})}),null!=t?t:n)}))),c?(0,r.cloneElement)(h.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==y})}))))}function p(e){var n=(0,a.Z)();return r.createElement(c,(0,o.Z)({key:String(n)},e))}},5005:function(e,n,t){t.r(n),t.d(n,{assets:function(){return L},contentTitle:function(){return G},default:function(){return U},frontMatter:function(){return j},metadata:function(){return Z},toc:function(){return P}});var o=t(7462),r=t(3366),a=(t(7294),t(3905)),i=t(9877),s=t(8215),l=["components"],c={toc:[]};function p(e){var n=e.components,t=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"forge.js")," file under the ",(0,a.kt)("inlineCode",{parentName:"p"},"services")," subfolder. This is where we will be implementing\nall the Forge-specific logic that will be used in different areas of our server application.\nLet's start by adding the following code to the file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="services/forge.js"',title:'"services/forge.js"'},"const { AuthClientTwoLegged } = require('forge-apis');\nconst { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET } = require('../config.js');\n\nlet internalAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, ['bucket:read', 'bucket:create', 'data:read', 'data:write', 'data:create'], true);\nlet publicAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, ['viewables:read'], true);\n\nasync function getInternalToken() {\n    if (!internalAuthClient.isAuthorized()) {\n        await internalAuthClient.authenticate();\n    }\n    return internalAuthClient.getCredentials();\n}\n\nasync function getPublicToken() {\n    if (!publicAuthClient.isAuthorized()) {\n        await publicAuthClient.authenticate();\n    }\n    return publicAuthClient.getCredentials();\n}\n\nmodule.exports = {\n    getPublicToken,\n};\n")),(0,a.kt)("p",null,"The code creates two authentication clients, one for generating tokens for internal use\n(giving us read/write access to the Data Management buckets and objects), and one for generating\ntokens for public use (only giving a read access to the translation outputs from the Model Derivative\nservice), and two helper methods to generate the corresponding tokens for us. The ",(0,a.kt)("inlineCode",{parentName:"p"},"getPublicToken")," function\nis exported from this script as we will use it in another part of our server application."))}p.isMDXComponent=!0;var u=["components"],d={toc:[]};function m(e){var n=e.components,t=(0,r.Z)(e,u);return(0,a.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Next, let's add a first endpoint to our server. Create an ",(0,a.kt)("inlineCode",{parentName:"p"},"auth.js")," file under the ",(0,a.kt)("inlineCode",{parentName:"p"},"routes")," subfolder\nwith the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="routes/auth.js"',title:'"routes/auth.js"'},"const express = require('express');\nconst { getPublicToken } = require('../services/forge.js');\n\nlet router = express.Router();\n\nrouter.get('/token', async function (req, res, next) {\n    try {\n        res.json(await getPublicToken());\n    } catch (err) {\n        next(err);\n    }\n});\n\nmodule.exports = router;\n")),(0,a.kt)("p",null,"Here we implement a new ",(0,a.kt)("a",{parentName:"p",href:"http://expressjs.com/en/4x/api.html#router"},"Express Router")," that will handle\nrequests coming to our server, with the URL ending with ",(0,a.kt)("inlineCode",{parentName:"p"},"/token"),", by generating a public access token\nand sending it back to the client as a JSON response."),(0,a.kt)("p",null,'Let\'s "mount" the router to our server application by modifying the ',(0,a.kt)("inlineCode",{parentName:"p"},"server.js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},"const express = require('express');\nconst { PORT } = require('./config.js');\n\nlet app = express();\napp.use(express.static('wwwroot'));\n// highlight-start\napp.use('/api/auth', require('./routes/auth.js'));\n// highlight-end\napp.listen(PORT, function () { console.log(`Server listening on port ${PORT}...`); });\n")),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Since the router has been attached to the ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/auth")," prefix, it will now handle all requests\ncoming to the endpoint ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/auth/token"),"."))))}m.isMDXComponent=!0;var g=["components"],h={toc:[]};function v(e){var n=e.components,i=(0,r.Z)(e,g);return(0,a.kt)("wrapper",(0,o.Z)({},h,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If the application is still running, restart it (for example, using ",(0,a.kt)("em",{parentName:"p"},"Run > Restart Debugging"),",\nor by clicking the green restart icon), otherwise start it again (using ",(0,a.kt)("em",{parentName:"p"},"Run > Start Debugging"),",\nor by pressing ",(0,a.kt)("inlineCode",{parentName:"p"},"F5"),"). When you navigate to ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:8080/api/auth/token"},"http://localhost:8080/api/auth/token"),"\nin the browser, the server should now respond with a JSON object containing the access token data."),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",alt:"Server Response",src:t(2157).Z,width:"1500",height:"929"})))}v.isMDXComponent=!0;var k=["components"],f={toc:[]};function T(e){var n=e.components,t=(0,r.Z)(e,k);return(0,a.kt)("wrapper",(0,o.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"ForgeService.cs")," file under the ",(0,a.kt)("inlineCode",{parentName:"p"},"Models")," subfolder. That is where we will be implementing\nall the Forge-specific logic that will be used in different areas of our server application. Let's\nstart by adding the following code to the file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/ForgeService.cs"',title:'"Models/ForgeService.cs"'},'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Autodesk.Forge;\nusing Autodesk.Forge.Client;\nusing Autodesk.Forge.Model;\n\npublic record Token(string AccessToken, DateTime ExpiresAt);\n\npublic class ForgeService\n{\n    private readonly string _clientId;\n    private readonly string _clientSecret;\n    private Token _internalTokenCache;\n    private Token _publicTokenCache;\n\n    public ForgeService(string clientId, string clientSecret, string bucket = null)\n    {\n        _clientId = clientId;\n        _clientSecret = clientSecret;\n    }\n\n    private async Task<Token> GetToken(Scope[] scopes)\n    {\n        dynamic auth = await new TwoLeggedApi().AuthenticateAsync(_clientId, _clientSecret, "client_credentials", scopes);\n        return new Token(auth.access_token, DateTime.UtcNow.AddSeconds(auth.expires_in));\n    }\n\n    public async Task<Token> GetPublicToken()\n    {\n        if (_publicTokenCache == null || _publicTokenCache.ExpiresAt < DateTime.UtcNow)\n            _publicTokenCache = await GetToken(new Scope[] { Scope.ViewablesRead });\n        return _publicTokenCache;\n    }\n\n    private async Task<Token> GetInternalToken()\n    {\n        if (_internalTokenCache == null || _internalTokenCache.ExpiresAt < DateTime.UtcNow)\n            _internalTokenCache = await GetToken(new Scope[] { Scope.BucketCreate, Scope.BucketRead, Scope.DataRead, Scope.DataWrite, Scope.DataCreate });\n        return _internalTokenCache;\n    }\n}\n')),(0,a.kt)("p",null,"The helper class takes the credentials of a Forge application, and creates two authentication clients,\none for internal use (giving us read/write access to the Data Management buckets and objects), and one\nfor public use (only allowing access to the translation outputs from the Model Derivative service),\nand a couple of methods for generating the corresponding tokens for us."),(0,a.kt)("p",null,"Next, let's update our ",(0,a.kt)("inlineCode",{parentName:"p"},"Startup.cs")," file to make a singleton instance of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ForgeService")," class\navailable to our server application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Startup.cs"',title:'"Startup.cs"'},'using System;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\npublic class Startup\n{\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    public IConfiguration Configuration { get; }\n\n    // This method gets called by the runtime. Use this method to add services to the container.\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddControllers();\n        var ForgeClientID = Environment.GetEnvironmentVariable("FORGE_CLIENT_ID");\n        var ForgeClientSecret = Environment.GetEnvironmentVariable("FORGE_CLIENT_SECRET");\n        var ForgeBucket = Environment.GetEnvironmentVariable("FORGE_BUCKET"); // Optional\n        if (string.IsNullOrEmpty(ForgeClientID) || string.IsNullOrEmpty(ForgeClientSecret))\n        {\n            throw new ApplicationException("Missing required environment variables FORGE_CLIENT_ID or FORGE_CLIENT_SECRET.");\n        }\n        // highlight-start\n        services.AddSingleton<ForgeService>(new ForgeService(ForgeClientID, ForgeClientSecret, ForgeBucket));\n        // highlight-end\n    }\n\n    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        app.UseHttpsRedirection();\n        app.UseDefaultFiles();\n        app.UseStaticFiles();\n        app.UseRouting();\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllers();\n        });\n    }\n}\n')))}T.isMDXComponent=!0;var b=["components"],C={toc:[]};function w(e){var n=e.components,t=(0,r.Z)(e,b);return(0,a.kt)("wrapper",(0,o.Z)({},C,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Now let's add a first endpoint to our server. Create an ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthController.cs")," file under the ",(0,a.kt)("inlineCode",{parentName:"p"},"Controllers"),"\nsubfolder with the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Controllers/AuthController.cs"',title:'"Controllers/AuthController.cs"'},'using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\n\n[ApiController]\n[Route("api/[controller]")]\npublic class AuthController : ControllerBase\n{\n    public record AccessToken(string access_token, long expires_in);\n\n    private readonly ForgeService _forgeService;\n\n    public AuthController(ForgeService forgeService)\n    {\n        _forgeService = forgeService;\n    }\n\n    [HttpGet("token")]\n    public async Task<AccessToken> GetAccessToken()\n    {\n        var token = await _forgeService.GetPublicToken();\n        return new AccessToken(\n            token.AccessToken,\n            (long)Math.Round((token.ExpiresAt - DateTime.UtcNow).TotalSeconds)\n        );\n    }\n}\n')),(0,a.kt)("p",null,"The controller will receive the instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"ForgeService")," through ASP.NET's\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-6.0"},"Dependency injection"),",\nand it will handle requests to ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/auth/token")," by generating a new access token\nand sending it back to the client as a JSON payload."))}w.isMDXComponent=!0;var y=["components"],N={toc:[]};function S(e){var n=e.components,i=(0,r.Z)(e,y);return(0,a.kt)("wrapper",(0,o.Z)({},N,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Let's see if our new server endpoint works. Try setting your own Forge client ID and client secret\nas the ",(0,a.kt)("inlineCode",{parentName:"p"},"FORGE_CLIENT_ID")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"FORGE_CLIENT_SECRET")," environment variables, and run the application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export FORGE_CLIENT_ID=your-own-forge-client-id\nexport FORGE_CLIENT_SECRET=your-own-forge-client-secret\ndotnet run\n")),(0,a.kt)("p",null,"If the server starts successfully and you navigate to ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:8080/api/auth/token"},"http://localhost:8080/api/auth/token"),"\nin the browser, the server should respond with a JSON object containing the access token data."),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",alt:"Server Response",src:t(2878).Z,width:"1500",height:"929"})))}S.isMDXComponent=!0;var E=["components"],x={toc:[]};function _(e){var n=e.components,t=(0,r.Z)(e,E);return(0,a.kt)("wrapper",(0,o.Z)({},x,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"ForgeService.cs")," file under the ",(0,a.kt)("inlineCode",{parentName:"p"},"Models")," subfolder. That is where we will be implementing\nall the Forge-specific logic that will be used in different areas of our server application. Let's\nstart by adding the following code to the file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/ForgeService.cs"',title:'"Models/ForgeService.cs"'},'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Autodesk.Forge;\nusing Autodesk.Forge.Client;\nusing Autodesk.Forge.Model;\n\npublic record Token(string AccessToken, DateTime ExpiresAt);\n\npublic class ForgeService\n{\n    private readonly string _clientId;\n    private readonly string _clientSecret;\n    private Token _internalTokenCache;\n    private Token _publicTokenCache;\n\n    public ForgeService(string clientId, string clientSecret, string bucket = null)\n    {\n        _clientId = clientId;\n        _clientSecret = clientSecret;\n    }\n\n    private async Task<Token> GetToken(Scope[] scopes)\n    {\n        dynamic auth = await new TwoLeggedApi().AuthenticateAsync(_clientId, _clientSecret, "client_credentials", scopes);\n        return new Token(auth.access_token, DateTime.UtcNow.AddSeconds(auth.expires_in));\n    }\n\n    public async Task<Token> GetPublicToken()\n    {\n        if (_publicTokenCache == null || _publicTokenCache.ExpiresAt < DateTime.UtcNow)\n            _publicTokenCache = await GetToken(new Scope[] { Scope.ViewablesRead });\n        return _publicTokenCache;\n    }\n\n    private async Task<Token> GetInternalToken()\n    {\n        if (_internalTokenCache == null || _internalTokenCache.ExpiresAt < DateTime.UtcNow)\n            _internalTokenCache = await GetToken(new Scope[] { Scope.BucketCreate, Scope.BucketRead, Scope.DataRead, Scope.DataWrite, Scope.DataCreate });\n        return _internalTokenCache;\n    }\n}\n')),(0,a.kt)("p",null,"The helper class takes the credentials of a Forge application, and creates two authentication clients,\none for internal use (giving us read/write access to the Data Management buckets and objects), and one\nfor public use (only allowing access to the translation outputs from the Model Derivative service),\nand a couple of methods for generating the corresponding tokens for us."),(0,a.kt)("p",null,"Next, let's update our ",(0,a.kt)("inlineCode",{parentName:"p"},"Startup.cs")," file to make a singleton instance of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ForgeService")," class\navailable to our server application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Startup.cs"',title:'"Startup.cs"'},'using System;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\npublic class Startup\n{\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    public IConfiguration Configuration { get; }\n\n    // This method gets called by the runtime. Use this method to add services to the container.\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddControllers();\n        var ForgeClientID = Environment.GetEnvironmentVariable("FORGE_CLIENT_ID");\n        var ForgeClientSecret = Environment.GetEnvironmentVariable("FORGE_CLIENT_SECRET");\n        var ForgeBucket = Environment.GetEnvironmentVariable("FORGE_BUCKET"); // Optional\n        if (string.IsNullOrEmpty(ForgeClientID) || string.IsNullOrEmpty(ForgeClientSecret))\n        {\n            throw new ApplicationException("Missing required environment variables FORGE_CLIENT_ID or FORGE_CLIENT_SECRET.");\n        }\n        // highlight-start\n        services.AddSingleton<ForgeService>(new ForgeService(ForgeClientID, ForgeClientSecret, ForgeBucket));\n        // highlight-end\n    }\n\n    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        app.UseHttpsRedirection();\n        app.UseDefaultFiles();\n        app.UseStaticFiles();\n        app.UseRouting();\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllers();\n        });\n    }\n}\n')))}_.isMDXComponent=!0;var I=["components"],D={toc:[]};function A(e){var n=e.components,t=(0,r.Z)(e,I);return(0,a.kt)("wrapper",(0,o.Z)({},D,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Now let's add a first endpoint to our server. Create an ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthController.cs")," file under the ",(0,a.kt)("inlineCode",{parentName:"p"},"Controllers"),"\nsubfolder with the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Controllers/AuthController.cs"',title:'"Controllers/AuthController.cs"'},'using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\n\n[ApiController]\n[Route("api/[controller]")]\npublic class AuthController : ControllerBase\n{\n    public record AccessToken(string access_token, long expires_in);\n\n    private readonly ForgeService _forgeService;\n\n    public AuthController(ForgeService forgeService)\n    {\n        _forgeService = forgeService;\n    }\n\n    [HttpGet("token")]\n    public async Task<AccessToken> GetAccessToken()\n    {\n        var token = await _forgeService.GetPublicToken();\n        return new AccessToken(\n            token.AccessToken,\n            (long)Math.Round((token.ExpiresAt - DateTime.UtcNow).TotalSeconds)\n        );\n    }\n}\n')),(0,a.kt)("p",null,"The controller will receive the instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"ForgeService")," through ASP.NET's\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-6.0"},"Dependency injection"),",\nand it will handle requests to ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/auth/token")," by generating a new access token\nand sending it back to the client as a JSON payload."))}A.isMDXComponent=!0;var F=["components"],O={toc:[]};function M(e){var n=e.components,i=(0,r.Z)(e,F);return(0,a.kt)("wrapper",(0,o.Z)({},O,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Let's see if our new server endpoint works. Start the application from Visual Studio,\nand when you navigate to ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:8080/api/auth/token"},"http://localhost:8080/api/auth/token"),",\nthe server should respond with a JSON object containing the access token data."),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",alt:"Server Response",src:t(9540).Z,width:"1500",height:"929"})))}M.isMDXComponent=!0;var R=["components"],j={},G="Authentication",Z={unversionedId:"tutorials/simple-viewer/auth",id:"tutorials/simple-viewer/auth",title:"Authentication",description:"In this step we're going to extend the server implementation so that it can authenticate itself",source:"@site/docs/tutorials/01-simple-viewer/02-auth.mdx",sourceDirName:"tutorials/01-simple-viewer",slug:"/tutorials/simple-viewer/auth",permalink:"/forge-samples-docs/docs/tutorials/simple-viewer/auth",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/master/docs/tutorials/01-simple-viewer/02-auth.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Application Setup",permalink:"/forge-samples-docs/docs/tutorials/simple-viewer/setup"},next:{title:"Data & Translations",permalink:"/forge-samples-docs/docs/tutorials/simple-viewer/data"}},L={},P=[{value:"Access tokens",id:"access-tokens",level:2},{value:"Server endpoints",id:"server-endpoints",level:2},{value:"Try it out",id:"try-it-out",level:2}],V={toc:P};function U(e){var n=e.components,t=(0,r.Z)(e,R);return(0,a.kt)("wrapper",(0,o.Z)({},V,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"authentication"},"Authentication"),(0,a.kt)("p",null,"In this step we're going to extend the server implementation so that it can authenticate itself\nto the Forge platform, and generate access tokens for different use cases."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},'It is a good practice to generate an "internal" token with more capabilities (for example,\nallowing you to create or delete files in the Data Management service) that will only be used\nby the server, and a "public" token with fewer capabilities that can be safely shared with\nthe client-side logic.'))),(0,a.kt)("h2",{id:"access-tokens"},"Access tokens"),(0,a.kt)(i.Z,{groupId:"development-environment",mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0,mdxType:"TabItem"},(0,a.kt)(p,{mdxType:"NodeJsVsCodeTokens"})),(0,a.kt)(s.Z,{value:"dotnet-vscode",label:".NET 6 & VSCode",default:!0,mdxType:"TabItem"},(0,a.kt)(T,{mdxType:"DotNetVsCodeTokens"})),(0,a.kt)(s.Z,{value:"dotnet-vs2022",label:".NET 6 & VS2022",default:!0,mdxType:"TabItem"},(0,a.kt)(_,{mdxType:"DotNetVs2022Tokens"}))),(0,a.kt)("h2",{id:"server-endpoints"},"Server endpoints"),(0,a.kt)(i.Z,{groupId:"development-environment",mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0,mdxType:"TabItem"},(0,a.kt)(m,{mdxType:"NodeJsVsCodeEndpoints"})),(0,a.kt)(s.Z,{value:"dotnet-vscode",label:".NET 6 & VSCode",default:!0,mdxType:"TabItem"},(0,a.kt)(w,{mdxType:"DotNetVsCodeEndpoints"})),(0,a.kt)(s.Z,{value:"dotnet-vs2022",label:".NET 6 & VS2022",default:!0,mdxType:"TabItem"},(0,a.kt)(A,{mdxType:"DotNetVs2022Endpoints"}))),(0,a.kt)("h2",{id:"try-it-out"},"Try it out"),(0,a.kt)(i.Z,{groupId:"development-environment",mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0,mdxType:"TabItem"},(0,a.kt)(v,{mdxType:"NodeJsVsCodeTest"})),(0,a.kt)(s.Z,{value:"dotnet-vscode",label:".NET 6 & VSCode",default:!0,mdxType:"TabItem"},(0,a.kt)(S,{mdxType:"DotNetVsCodeTest"})),(0,a.kt)(s.Z,{value:"dotnet-vs2022",label:".NET 6 & VS2022",default:!0,mdxType:"TabItem"},(0,a.kt)(M,{mdxType:"DotNetVs2022Test"}))))}U.isMDXComponent=!0},9540:function(e,n,t){n.Z=t.p+"assets/images/auth-response-a04660a8ac678aa5298db7efcd3f3c8f.png"},2878:function(e,n,t){n.Z=t.p+"assets/images/auth-response-a04660a8ac678aa5298db7efcd3f3c8f.png"},2157:function(e,n,t){n.Z=t.p+"assets/images/auth-response-a04660a8ac678aa5298db7efcd3f3c8f.png"}}]);