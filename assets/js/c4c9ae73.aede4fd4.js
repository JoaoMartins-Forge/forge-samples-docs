"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[948],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return t?i.createElement(h,a(a({ref:n},p),{},{components:t})):i.createElement(h,a({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<r;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4748:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var i=t(7462),o=t(3366),r=(t(7294),t(3905)),a=["components"],l={sidebar_position:4},s="Viewer & UI",c={unversionedId:"tutorials/hubs-browser/nodejs/viewer",id:"tutorials/hubs-browser/nodejs/viewer",isDocsHomePage:!1,title:"Viewer & UI",description:"Finally, we're ready to build the client-side piece of our application.",source:"@site/docs/tutorials/hubs-browser/nodejs/viewer.md",sourceDirName:"tutorials/hubs-browser/nodejs",slug:"/tutorials/hubs-browser/nodejs/viewer",permalink:"/forge-samples-docs/docs/tutorials/hubs-browser/nodejs/viewer",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/main/website/docs/tutorials/hubs-browser/nodejs/viewer.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Browsing Hubs",permalink:"/forge-samples-docs/docs/tutorials/hubs-browser/nodejs/hubs"},next:{title:"Basic Server",permalink:"/forge-samples-docs/docs/tutorials/hubs-browser/dotnet/server"}},p=[{value:"Viewer logic",id:"viewer-logic",children:[]},{value:"Sidebar logic",id:"sidebar-logic",children:[]},{value:"Application logic",id:"application-logic",children:[]},{value:"User interface",id:"user-interface",children:[]},{value:"Try it out",id:"try-it-out",children:[]}],d={toc:p};function u(e){var n=e.components,l=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},d,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"viewer--ui"},"Viewer & UI"),(0,r.kt)("p",null,"Finally, we're ready to build the client-side piece of our application."),(0,r.kt)("h2",{id:"viewer-logic"},"Viewer logic"),(0,r.kt)("p",null,"Let's start by implementing the Forge Viewer functionality of our application.\nCreate a ",(0,r.kt)("inlineCode",{parentName:"p"},"viewer.js")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," subfolder with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="public/viewer.js"',title:'"public/viewer.js"'},"export function initViewer(container) {\n    async function getAccessToken(callback) {\n        try {\n            const resp = await fetch('/api/auth/token');\n            if (!resp.ok)\n                throw new Error(await resp.text());\n            const { access_token, expires_in } = await resp.json();\n            callback(access_token, expires_in);\n        } catch (err) {\n            alert('Could not obtain access token. See the console for more details.');\n            console.error(err);        \n        }\n    }\n    return new Promise(function (resolve, reject) {\n        Autodesk.Viewing.Initializer({ getAccessToken }, async function () {\n            const viewer = new Autodesk.Viewing.GuiViewer3D(container);\n            viewer.start();\n            viewer.setTheme('light-theme');\n            resolve(viewer);\n        });\n    });\n}\n\nexport function loadModel(viewer, urn) {\n    function onDocumentLoadSuccess(doc) {\n        viewer.loadDocumentNode(doc, doc.getRoot().getDefaultGeometry());\n    }\n    function onDocumentLoadFailure(code, message) {\n        alert('Could not load model. See the console for more details.');\n        console.error(message);\n    }\n    Autodesk.Viewing.Document.load('urn:' + urn, onDocumentLoadSuccess, onDocumentLoadFailure);\n}\n")),(0,r.kt)("p",null,"The script is an ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"},"ES6 module"),"\nthat exports two functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"initViewer")," will create a new instance of Forge Viewer in the specified DOM container"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"loadModel")," for loading a specific model to the viewer")),(0,r.kt)("h2",{id:"sidebar-logic"},"Sidebar logic"),(0,r.kt)("p",null,"Next we'll implement the behavior of a sidebar where we're going to display\nall the hubs, projects, folders, items, and versions in a 3rd party tree-view\ncomponent. Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"sidebar.js")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," subfolder with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="public/sidebar.js"',title:'"public/sidebar.js"'},"import { VanillaTreeView } from 'https://unpkg.com/simple-treeview/dist/treeview.vanilla.js';\n\nexport function initTree(container, onSelectionChanged) {\n    async function getHubs() {\n        const resp = await fetch('/api/hubs');\n        const hubs = await resp.json();\n        return hubs.map(hub => ({\n            id: `hub|${hub.id}`,\n            label: hub.attributes.name,\n            icon: { classes: ['fas', 'fa-cloud'] },\n            state: 'collapsed'\n        }));\n    }\n\n    async function getProjects(hubId) {\n        const resp = await fetch(`/api/hubs/${hubId}/projects`);\n        const projects = await resp.json();\n        return projects.map(project => ({\n            id: `project|${hubId}|${project.id}`,\n            label: project.attributes.name,\n            icon: { classes: ['fas', 'fa-building'] },\n            state: 'collapsed'\n        }));\n    }\n\n    async function getProjectContents(hubId, projectId, folderId) {\n        let url = `/api/hubs/${hubId}/projects/${projectId}/contents`;\n        if (folderId) {\n            url += `?folder_id=${folderId}`;\n        }\n        const resp = await fetch(url);\n        const contents = await resp.json();\n        return contents.map(item => {\n            if (item.type === 'folders') {\n                return {\n                    id: `folder|${hubId}|${projectId}|${item.id}`,\n                    label: item.attributes.displayName,\n                    icon: { classes: ['fas', 'fa-folder'] },\n                    state: 'collapsed'\n                };\n            } else {\n                return {\n                    id: `item|${hubId}|${projectId}|${item.id}`,\n                    label: item.attributes.displayName,\n                    icon: { classes: ['far', 'fa-file'] },\n                    state: 'collapsed'\n                };\n            }\n        });\n    }\n\n    async function getItemVersions(hubId, projectId, itemId) {\n        const resp = await fetch(`/api/hubs/${hubId}/projects/${projectId}/contents/${itemId}/versions`);\n        const versions = await resp.json();\n        return versions.map(version => ({\n            id: version.id,\n            label: version.attributes.displayName,\n            icon: { classes: ['far', 'fa-clock'] }\n        }));\n    }\n\n    return new VanillaTreeView(container, {\n        provider: {\n            async getChildren(id) {\n                if (!id) {\n                    return getHubs();\n                }\n                const tokens = id.split('|');\n                switch (tokens[0]) {\n                    case 'hub':\n                        return getProjects(tokens[1]);\n                    case 'project':\n                        return getProjectContents(tokens[1], tokens[2], null);\n                    case 'folder':\n                        return getProjectContents(tokens[1], tokens[2], tokens[3]);\n                    case 'item':\n                        return getItemVersions(tokens[1], tokens[2], tokens[3]);\n                    default:\n                        return [];\n                }\n            }\n        },\n        onSelectionChanged: onSelectionChanged\n    });\n}\n")),(0,r.kt)("h2",{id:"application-logic"},"Application logic"),(0,r.kt)("p",null,"Now let's wire all the UI components together. Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"main.js")," file under\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," folder, and populate it with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="public/main.js"',title:'"public/main.js"'},"import { initViewer, loadModel } from './viewer.js';\nimport { initTree } from './sidebar.js';\n\nconst login = document.getElementById('login');\ntry {\n    const resp = await fetch('/api/auth/profile');\n    const profile = await resp.json();\n    login.innerText = `Logout (${profile.name})`;\n    login.onclick = () => window.location.replace('/api/auth/logout');\n    const viewer = await initViewer(document.getElementById('preview'));\n    initTree(document.getElementById('tree'), function (nodes) {\n        if (nodes.length === 1) {\n            const urn = btoa(nodes[0].id).replace(/=/g, '');\n            loadModel(viewer, urn);\n        }\n    });\n} catch (err) {\n    login.innerText = 'Login';\n    login.onclick = () => window.location.replace('/api/auth/login');\n}\nlogin.style.display = 'inline';\n")),(0,r.kt)("p",null,"The script will first try and obtain user details to check whether we're logged in or not.\nIf we are, the code can then initialize the viewer as well as the tree-view component.\nThe callback function passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"initTree")," makes sure that when we click on a leaf node\nin the tree, the viewer will start loading the corresponding Forge model."),(0,r.kt)("h2",{id:"user-interface"},"User interface"),(0,r.kt)("p",null,"And finally, let's build the UI of our application."),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"main.css")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," subfolder, and populate it with the following\nCSS rules:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="public/main.css"',title:'"public/main.css"'},"body, html {\n    margin: 0;\n    padding: 0;\n    height: 100vh;\n    font-family: ArtifaktElement;\n}\n\n#header, #sidebar, #preview {\n    position: absolute;\n}\n\n#header {\n    height: 3em;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    align-items: center;\n}\n\n#sidebar {\n    width: 25%;\n    left: 0;\n    top: 3em;\n    bottom: 0;\n    overflow-y: scroll;\n}\n\n#preview {\n    width: 75%;\n    right: 0;\n    top: 3em;\n    bottom: 0;\n}\n\n#header > * {\n    height: 2em;\n    margin: 0 0.5em;\n}\n\n#login {\n    font-family: ArtifaktElement;\n    font-size: 1em;\n}\n\n#header .title {\n    height: auto;\n    margin-right: auto;\n}\n\n#tree {\n    margin: 0.5em;\n}\n\n.treeview-node .icon {\n    width: 16px;\n}\n\n@media (max-width: 768px) {\n    #sidebar {\n        width: 100%;\n        top: 3em;\n        bottom: 75%;\n    }\n    #preview {\n        width: 100%;\n        top: 25%;\n        bottom: 0;\n    }\n}\n")),(0,r.kt)("p",null,"Then, create an ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," file (also in the ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," subfolder) with the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="public/index.html"',title:'"public/index.html"'},'<!doctype html>\n<html lang="en">\n\n<head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <link rel="stylesheet" href="https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/style.css">\n    <link rel="stylesheet" href="https://unpkg.com/simple-treeview/dist/treeview.vanilla.css">\n    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css">\n    <link rel="stylesheet" href="/main.css">\n    <title>Autodesk Forge: Hubs Browser</title>\n</head>\n\n<body>\n    <div id="header">\n        <img class="logo" src="/logo.png" alt="Autodesk Forge">\n        <span class="title">Hubs Browser</span>\n        <button id="login" style="display: none">Login</button>\n    </div>\n    <div id="sidebar">\n        <div id="tree"></div>\n    </div>\n    <div id="preview"></div>\n    <script src="https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/viewer3D.js"><\/script>\n    <script src="/main.js" type="module"><\/script>\n</body>\n\n</html>\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note that since ",(0,r.kt)("inlineCode",{parentName:"p"},"public/main.js")," is also an ES6 module, we have to use ",(0,r.kt)("inlineCode",{parentName:"p"},'type="module"'),"\nin its ",(0,r.kt)("inlineCode",{parentName:"p"},"<script>")," tag.")),(0,r.kt)("p",null,"The application will look for ",(0,r.kt)("inlineCode",{parentName:"p"},"favicon.ico")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"logo.png")," images under the ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," folder to use\nas the website's icon and logo. If you don't have any images of your own, feel free to download\nthem from one of our samples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/petrbroz/forge-simple-viewer-nodejs/blob/develop/public/favicon.ico"},"https://github.com/petrbroz/forge-simple-viewer-nodejs/blob/develop/public/favicon.ico")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/petrbroz/forge-simple-viewer-nodejs/blob/develop/public/logo.png"},"https://github.com/petrbroz/forge-simple-viewer-nodejs/blob/develop/public/logo.png"))),(0,r.kt)("h2",{id:"try-it-out"},"Try it out"),(0,r.kt)("p",null,"And that's it! Your application is now ready for action. Start it from the command line as usual:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export SERVER_SESSION_SECRET=some-secret-phrase\nexport FORGE_CLIENT_ID=your-own-forge-client-id\nexport FORGE_CLIENT_SECRET=your-own-forge-client-secret\nexport FORGE_CALLBACK_URL=http://localhost:3000/api/auth/callback\nnpm start\n")),(0,r.kt)("p",null,"And then navigate to http://localhost:3000 in your browser. You should be presented with a simple UI,\nwith a tree-view on the left side, and an empty viewer on the right. Try browsing through the tree,\nand select a specific version of one of your files. After that the corresponding model should be loaded\ninto the viewer."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Final App",src:t(5018).Z})))}u.isMDXComponent=!0},5018:function(e,n,t){n.Z=t.p+"assets/images/final-app-7302c45030e02a5f244d48bf585b1e86.png"}}]);